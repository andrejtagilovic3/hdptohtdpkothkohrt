// ==================== UNDERTALE BATTLE SYSTEM (–ù–û–í–ê–Ø HP –°–ò–°–¢–ï–ú–ê) ====================

class UndertaleBattle {
    constructor() {
        this.playerHP = 100;
        this.enemyHP = 100;
        this.playerMaxHP = 100;
        this.enemyMaxHP = 100;
        this.currentTurn = 'player';
        this.battleActive = false;
        this.playerNft = null;
        this.enemyNft = null;
        this.battleLog = [];
        this.playerDodging = false;
    }

    init(playerNft, enemyNft) {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ç–≤—ã:', playerNft.name, 'vs', enemyNft.name);
        
        this.playerNft = {...playerNft};
        this.enemyNft = {...enemyNft};
        this.playerHP = 100;
        this.enemyHP = 100;
        this.playerMaxHP = 100;
        this.enemyMaxHP = 100;
        this.battleActive = true;
        this.currentTurn = 'player';
        this.battleLog = [];
        this.playerDodging = false;
        
        this.createBattleUI();
        this.updateDisplay();
        this.showPlayerActions();
        this.addBattleLog(`–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${playerNft.name} –ø—Ä–æ—Ç–∏–≤ ${enemyNft.name}`);
        
        return true;
    }

    createBattleUI() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        const existing = document.getElementById('undertale-battle-container');
        if (existing) existing.remove();

        const battleHTML = `
            <div id="undertale-battle-container" class="undertale-battle-container">
                <!-- –í–†–ê–ì - –±–æ–ª—å—à–∞—è –æ–±–ª–∞—Å—Ç—å —Å–≤–µ—Ä—Ö—É -->
                <div class="enemy-battle-area">
                    <button class="escape-btn" onclick="battleSystem.attemptEscape()">
                        –°–±–µ–∂–∞—Ç—å (50‚≠ê)
                    </button>

                    <img id="enemy-battle-img" class="enemy-battle-img" alt="Enemy NFT">
                    <div id="enemy-name" class="enemy-name">–í–†–ê–ì</div>

                    <!-- HP –≤—Ä–∞–≥–∞ - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê -->
                    <div class="battle-hp-container enemy-hp-container">
                        <div id="enemy-hp-bar" class="battle-hp-bar"></div>
                    </div>
                    <div id="enemy-hp-text" class="battle-hp-text">100/100 HP</div>
                </div>

                <!-- –ù–ò–ñ–ù–Ø–Ø –û–ë–õ–ê–°–¢–¨ -->
                <div class="battle-bottom-area">
                    <!-- –õ–û–ì –ë–û–Ø -->
                    <div id="battle-log-container" class="battle-log-container"></div>

                    <!-- –û–ë–õ–ê–°–¢–¨ –î–ï–ô–°–¢–í–ò–ô -->
                    <div class="battle-actions-area">
                        <!-- –ö–ù–û–ü–ö–ò –°–õ–ï–í–ê -->
                        <div class="battle-buttons">
                            <button id="attack-btn" class="battle-action-btn" onclick="battleSystem.playerAttack()">
                                <i class="fas fa-sword"></i>
                                –ê–¢–ê–ö–ê
                            </button>
                            <button id="dodge-btn" class="battle-action-btn" onclick="battleSystem.playerDodge()">
                                <i class="fas fa-running"></i>
                                –£–í–ï–†–ù–£–¢–¨–°–Ø
                            </button>
                        </div>

                        <!-- –ò–ì–†–û–ö –í –¶–ï–ù–¢–†–ï -->
                        <div class="player-battle-area">
                            <img id="player-battle-img" class="player-battle-img" alt="Player NFT">
                            <div>
                                <div class="player-name">–í–´</div>
                                <div id="player-nft-name" class="player-nft-name">NFT NAME</div>
                                <!-- HP –∏–≥—Ä–æ–∫–∞ - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê -->
                                <div class="battle-hp-container player-hp-container">
                                    <div id="player-hp-bar" class="battle-hp-bar"></div>
                                </div>
                            </div>
                            <div id="player-hp-text" class="player-hp-text">100/100 HP</div>
                        </div>

                        <!-- –ö–ù–û–ü–ö–ò –°–ü–†–ê–í–ê -->
                        <div class="battle-buttons">
                            <div style="flex: 1; opacity: 0.3; background: #1a1a1a; border: 2px dashed #333333; border-radius: 12px; display: flex; align-items: center; justify-content: center; color: #666666; font-size: 12px;">
                                –†–µ–∑–µ—Ä–≤
                            </div>
                            <div style="flex: 1; opacity: 0.3; background: #1a1a1a; border: 2px dashed #333333; border-radius: 12px; display: flex; align-items: center; justify-content: center; color: #666666; font-size: 12px;">
                                –†–µ–∑–µ—Ä–≤
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ò–¢–í–´ -->
                <div id="battle-result-overlay" class="battle-result-overlay" style="display: none;">
                    <div class="battle-result-modal">
                        <div id="result-title" class="result-title"></div>
                        <div id="result-details" class="result-details"></div>
                        <button class="result-back-btn" onclick="battleSystem.endBattle()">
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', battleHTML);
        console.log('‚úÖ UI —Å–æ–∑–¥–∞–Ω');
    }

    // === –ù–û–í–´–ô –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø HP –ë–ê–†–û–í ===
    updateHPBar(barId, currentHP, maxHP) {
        const bar = document.getElementById(barId);
        if (!bar) {
            console.error(`‚ùå HP –±–∞—Ä ${barId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        const percent = Math.max(0, Math.min(100, (currentHP / maxHP) * 100));
    
    // –î–æ–±–∞–≤—å –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å –≤ –∫–æ–Ω—Å–æ–ª–∏, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –¥–ª—è 'player-hp-bar'
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${barId}: ${currentHP}/${maxHP} = ${percent.toFixed(1)}%`);

    // –£–ø—Ä–æ—â–∞–µ–º: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ—Ä—ë–º –∏–∑ CSS
        bar.style.width = percent + '%';  // –ë–µ–∑ !important –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤—Å–µ–≥–æ —Å—Ç–∏–ª—è

    // –£–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å (CSS —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç background –∏ –∞–Ω–∏–º–∞—Ü–∏—é)
        if (currentHP <= 25) {
            bar.classList.add('critical');
        } else {
            bar.classList.remove('critical');
        }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
        bar.offsetWidth;  // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –±—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç

        return true;
    }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 50–º—Å
        setTimeout(() => {
            if (bar.style.width !== `${percent}%`) {
                console.warn(`‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${barId}`);
                bar.setAttribute('style', `width: ${percent}% !important; transition: width 0.8s ease-out !important; height: 100% !important; background: linear-gradient(90deg, #d32f2f 0%, #f44336 100%) !important; position: relative !important;`);
                bar.offsetWidth;
            }
        }, 50);

        return true;
    }

    updateDisplay() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò–≥—Ä–æ–∫ HP:', this.playerHP, '–í—Ä–∞–≥ HP:', this.enemyHP);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        const playerImg = document.getElementById('player-battle-img');
        const enemyImg = document.getElementById('enemy-battle-img');
        const enemyName = document.getElementById('enemy-name');
        const playerNftName = document.getElementById('player-nft-name');

        if (playerImg && this.playerNft) {
            playerImg.src = this.playerNft.img;
            playerImg.alt = this.playerNft.name;
        }
        if (enemyImg && this.enemyNft) {
            enemyImg.src = this.enemyNft.img;
            enemyImg.alt = this.enemyNft.name;
            enemyName.textContent = this.enemyNft.name.toUpperCase();
        }
        if (playerNftName && this.playerNft) {
            playerNftName.textContent = this.playerNft.name;
        }

        // === –û–ë–ù–û–í–õ–Ø–ï–ú HP –ë–ê–†–´ –ù–û–í–´–ú –ú–ï–¢–û–î–û–ú ===
        this.updateHPBar('player-hp-bar', this.playerHP, this.playerMaxHP);
        this.updateHPBar('enemy-hp-bar', this.enemyHP, this.enemyMaxHP);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç HP
        const playerHPText = document.getElementById('player-hp-text');
        const enemyHPText = document.getElementById('enemy-hp-text');

        if (playerHPText) {
            const displayPlayerHP = Math.max(0, Math.round(this.playerHP));
            playerHPText.textContent = `${displayPlayerHP}/${this.playerMaxHP} HP`;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç HP –∏–≥—Ä–æ–∫–∞:', displayPlayerHP + '/' + this.playerMaxHP);
        }
        if (enemyHPText) {
            const displayEnemyHP = Math.max(0, Math.round(this.enemyHP));
            enemyHPText.textContent = `${displayEnemyHP}/${this.enemyMaxHP} HP`;
        }
    }

    addBattleLog(message) {
        const logContainer = document.getElementById('battle-log-container');
        if (!logContainer) return;

        this.battleLog.push(message);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        const recentLogs = this.battleLog.slice(-5);
        logContainer.innerHTML = recentLogs
            .map(log => `<div style="margin-bottom: 4px; padding: 2px 0;">‚Ä¢ ${log}</div>`)
            .join('');
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        logContainer.scrollTop = logContainer.scrollHeight;
        
        console.log('üìù –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', message);
    }

    showPlayerActions() {
        const attackBtn = document.getElementById('attack-btn');
        const dodgeBtn = document.getElementById('dodge-btn');
        
        if (!attackBtn || !dodgeBtn) return;
        
        if (this.currentTurn !== 'player' || !this.battleActive) {
            attackBtn.disabled = true;
            dodgeBtn.disabled = true;
        } else {
            attackBtn.disabled = false;
            dodgeBtn.disabled = false;
        }
        
        console.log('üéÆ –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –•–æ–¥:', this.currentTurn, '–ê–∫—Ç–∏–≤–Ω–∞:', this.battleActive);
    }

    playerAttack() {
        if (this.currentTurn !== 'player' || !this.battleActive) {
            console.log('‚ùå –ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }

        console.log('‚öîÔ∏è –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç!');
        this.addBattleLog('–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ!');
        
        let damage = Math.floor(Math.random() * 25) + 15;
        let isCrit = Math.random() < 0.15;
        const enemyDodge = Math.random() < 0.08;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥—ã –∏–≥—Ä–æ–∫–∞
        if (this.playerNft.upgrades) {
            if (this.playerNft.upgrades.damage) {
                damage *= this.playerNft.upgrades.damage;
            }
            if (this.playerNft.upgrades.crit) {
                const critMultiplier = this.playerNft.upgrades.crit;
                if (Math.random() < (0.15 * critMultiplier)) {
                    isCrit = true;
                }
            }
        }

        if (enemyDodge) {
            this.addBattleLog('–í—Ä–∞–≥ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!');
            this.showDamageEffect(document.getElementById('enemy-battle-img'), '–ú–ò–ú–û', false);
        } else {
            if (isCrit) {
                damage *= 1.8;
                this.addBattleLog(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –ù–∞–Ω–µ—Å–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞!`);
                this.showDamageEffect(document.getElementById('enemy-battle-img'), Math.round(damage), true);
            } else {
                this.addBattleLog(`–ù–∞–Ω–µ—Å–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞`);
                this.showDamageEffect(document.getElementById('enemy-battle-img'), Math.round(damage), false);
            }
            
            this.enemyHP -= damage;
            this.enemyHP = Math.max(0, this.enemyHP);
            
            document.getElementById('enemy-battle-img').classList.add('battle-shake');
            setTimeout(() => {
                const img = document.getElementById('enemy-battle-img');
                if (img) img.classList.remove('battle-shake');
            }, 500);
        }

        this.updateDisplay();
        this.checkBattleEnd();

        if (this.battleActive) {
            this.currentTurn = 'enemy';
            this.showPlayerActions();
            
            setTimeout(() => {
                this.enemyTurn();
            }, 2000);
        }
    }

    playerDodge() {
        if (this.currentTurn !== 'player' || !this.battleActive) {
            console.log('‚ùå –£–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
            return;
        }

        console.log('üèÉ –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —É–∫–ª–æ–Ω–µ–Ω–∏—é!');
        this.addBattleLog('–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å —É–≤–µ—Ä–Ω—É—Ç—å—Å—è!');
        this.playerDodging = true;

        this.currentTurn = 'enemy';
        this.showPlayerActions();

        setTimeout(() => {
            this.enemyTurn();
        }, 1500);
    }

    enemyTurn() {
        if (this.currentTurn !== 'enemy' || !this.battleActive) {
            console.log('‚ùå –•–æ–¥ –≤—Ä–∞–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üëπ –•–æ–¥ –≤—Ä–∞–≥–∞!');
        this.addBattleLog('–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç!');

        let damage = Math.floor(Math.random() * 22) + 12;
        const isCrit = Math.random() < 0.12;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥—ã –≤—Ä–∞–≥–∞
        if (this.enemyNft.upgrades && this.enemyNft.upgrades.damage) {
            damage *= this.enemyNft.upgrades.damage;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        let playerDodgeChance = 0.06;
        if (this.playerNft.upgrades && this.playerNft.upgrades.dodge) {
            playerDodgeChance *= this.playerNft.upgrades.dodge;
        }

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–∫–ª–æ–Ω–µ–Ω–∏–µ
        if (this.playerDodging) {
            playerDodgeChance += 0.35;
        }

        const playerDodged = Math.random() < playerDodgeChance;

        if (playerDodged) {
            this.addBattleLog('–í—ã —É–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏!');
            this.showDamageEffect(document.getElementById('player-battle-img'), '–ú–ò–ú–û', false);
        } else {
            if (isCrit) {
                damage *= 1.7;
                this.addBattleLog(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ê–¢–ê–ö–ê –í–†–ê–ì–ê! –ü–æ–ª—É—á–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞!`);
                this.showDamageEffect(document.getElementById('player-battle-img'), Math.round(damage), true);
            } else {
                this.addBattleLog(`–ü–æ–ª—É—á–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞`);
                this.showDamageEffect(document.getElementById('player-battle-img'), Math.round(damage), false);
            }
            
            this.playerHP -= damage;
            this.playerHP = Math.max(0, this.playerHP);
            
            console.log('üíî –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É:', damage, '–û—Å—Ç–∞–ª–æ—Å—å HP:', this.playerHP);
            
            document.getElementById('player-battle-img').classList.add('battle-shake');
            setTimeout(() => {
                const img = document.getElementById('player-battle-img');
                if (img) img.classList.remove('battle-shake');
            }, 500);
        }

        this.playerDodging = false;
        this.updateDisplay();
        this.checkBattleEnd();

        if (this.battleActive) {
            this.currentTurn = 'player';
            setTimeout(() => {
                this.showPlayerActions();
                this.addBattleLog('–í–∞—à —Ö–æ–¥!');
            }, 1800);
        }
    }

    showDamageEffect(targetElement, damage, isCrit = false) {
        if (!targetElement) return;

        const effect = document.createElement('div');
        effect.className = `damage-effect ${isCrit ? 'crit' : ''}`;
        effect.textContent = damage;
        
        targetElement.style.position = 'relative';
        targetElement.appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 1200);
    }

    checkBattleEnd() {
        if (this.playerHP <= 0) {
            console.log('üíÄ –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª');
            this.battleActive = false;
            this.showBattleResult(false);
        } else if (this.enemyHP <= 0) {
            console.log('üèÜ –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª');
            this.battleActive = false;
            this.showBattleResult(true);
        }
    }

    showBattleResult(playerWon) {
        const resultOverlay = document.getElementById('battle-result-overlay');
        const resultTitle = document.getElementById('result-title');
        const resultDetails = document.getElementById('result-details');

        if (!resultOverlay || !resultTitle || !resultDetails) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        if (playerWon) {
            resultTitle.className = 'result-title win';
            resultTitle.innerHTML = 'üèÜ –ü–û–ë–ï–î–ê!';
            resultDetails.innerHTML = `
                <strong>–í—ã –ø–æ–±–µ–¥–∏–ª–∏!</strong><br><br>
                –ü–æ–ª—É—á–µ–Ω NFT: <strong>${this.enemyNft.name}</strong><br>
                <em>NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é</em>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if (window.collection && Array.isArray(window.collection)) {
                const newNft = {
                    ...this.enemyNft, 
                    buyPrice: this.enemyNft.price || 150
                };
                window.collection.push(newNft);
                console.log('‚úÖ NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', this.enemyNft.name);
                console.log('üìä –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', window.collection.length);
            } else {
                console.error('‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
            }
        } else {
            resultTitle.className = 'result-title lose';
            resultTitle.innerHTML = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï!';
            resultDetails.innerHTML = `
                <strong>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...</strong><br><br>
                –ü–æ—Ç–µ—Ä—è–Ω NFT: <strong>${this.playerNft.name}</strong><br>
                <em>NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</em>
            `;

            // –£–¥–∞–ª—è–µ–º NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            if (window.collection && Array.isArray(window.collection)) {
                const index = window.collection.findIndex(nft => 
                    nft.name === this.playerNft.name && 
                    nft.img === this.playerNft.img && 
                    nft.buyPrice === this.playerNft.buyPrice
                );
                
                if (index !== -1) {
                    window.collection.splice(index, 1);
                    console.log('‚ùå NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', this.playerNft.name);
                    console.log('üìä –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', window.collection.length);
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π NFT
                    if (window.activeBattleNft) {
                        window.activeBattleNft = null;
                    }
                } else {
                    console.error('‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∏—Ç–≤
        if (window.battleHistory && Array.isArray(window.battleHistory)) {
            window.battleHistory.push({
                playerNft: {...this.playerNft},
                opponentNft: {...this.enemyNft},
                won: playerWon,
                timestamp: new Date().toISOString()
            });
        }

        resultOverlay.style.display = 'flex';

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (window.updateUI) {
            window.updateUI();
        }
        if (window.saveData) {
            setTimeout(() => {
                window.saveData();
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            }, 500);
        }
        
        console.log('üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã –ø–æ–∫–∞–∑–∞–Ω:', playerWon ? '–ü–û–ë–ï–î–ê' : '–ü–û–†–ê–ñ–ï–ù–ò–ï');
    }

    attemptEscape() {
        if (window.stars < 50) {
            this.addBattleLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–±–µ–≥–∞! (–Ω—É–∂–Ω–æ 50)');
            return;
        }

        window.stars -= 50;
        this.addBattleLog('–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è! –ü–æ—Ç–µ—Ä—è–Ω–æ 50 –∑–≤—ë–∑–¥.');
        
        if (window.updateUI) window.updateUI();
        if (window.saveData) window.saveData();
        
        setTimeout(() => {
            this.endBattle();
        }, 1500);
    }

    endBattle() {
        console.log('üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã');
        
        const container = document.getElementById('undertale-battle-container');
        if (container) {
            container.remove();
            console.log('üóëÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∏—Ç–≤—ã —É–¥–∞–ª–µ–Ω');
        }

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const screens = document.querySelectorAll('.screen');
        screens.forEach(s => s.classList.remove('active'));
        
        const mainScreen = document.getElementById('main-screen');
        if (mainScreen) {
            mainScreen.classList.add('active');
            console.log('üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => item.classList.remove('active'));
        if (navItems[0]) {
            navItems[0].classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.renderCenterArea) {
            window.renderCenterArea();
            console.log('üñºÔ∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
        if (window.updateUI) {
            window.updateUI();
            console.log('üîÑ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
        
        console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.battleSystem = new UndertaleBattle();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–∏—Ç–≤—ã
window.startUndertaleBattle = function(playerNft, enemyNft) {
    console.log('üöÄ === –ó–ê–ü–£–°–ö UNDERTALE –ë–ò–¢–í–´ ===');
    
    if (!playerNft || !enemyNft) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ NFT!');
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω NFT –¥–ª—è –±–∏—Ç–≤—ã!');
        return false;
    }
    
    const success = window.battleSystem.init(playerNft, enemyNft);
    console.log(success ? '‚úÖ –ë–∏—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞!' : '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!');
    return success;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Undertale Battle System –∑–∞–≥—Ä—É–∂–µ–Ω!');
});

setTimeout(() => {
    if (typeof window.startUndertaleBattle === 'function' && window.battleSystem) {
        console.log('üü¢ ‚úÖ Battle System –≥–æ—Ç–æ–≤!');
    } else {
        console.error('üî¥ ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Battle System!');
    }
}, 1000);

