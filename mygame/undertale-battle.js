// ==================== –ù–û–í–ê–Ø UNDERTALE BATTLE SYSTEM ====================

class NewUndertaleBattle {
    constructor() {
        this.reset();
    }

    reset() {
        this.playerHP = 100;
        this.enemyHP = 100;
        this.maxHP = 100;
        this.currentTurn = 'player';
        this.battleActive = false;
        this.playerNft = null;
        this.enemyNft = null;
        this.battleLog = [];
        this.playerDodging = false;
        this.battleContainer = null;
    }

    // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã
    startBattle(playerNft, enemyNft) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã:', playerNft.name, 'vs', enemyNft.name);
        
        // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.reset();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.playerNft = { ...playerNft };
        this.enemyNft = { ...enemyNft };
        this.battleActive = true;
        this.currentTurn = 'player';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.buildUI();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.refreshUI();
        this.updateButtons();
        this.logMessage(`–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${playerNft.name} –ø—Ä–æ—Ç–∏–≤ ${enemyNft.name}`);
        
        console.log('‚úÖ –ë–∏—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return true;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    buildUI() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const oldContainer = document.getElementById('battle-container');
        if (oldContainer) {
            oldContainer.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const html = `
            <div id="battle-container" class="undertale-battle-container">
                <!-- –í–†–ê–ì -->
                <div class="enemy-battle-area">
                    <button class="escape-btn" onclick="newBattleSystem.escapeBattle()">
                        –°–±–µ–∂–∞—Ç—å (50‚≠ê)
                    </button>

                    <img id="enemy-img" class="enemy-battle-img" alt="Enemy NFT">
                    <div id="enemy-name" class="enemy-name">–í–†–ê–ì</div>

                    <!-- HP –í–†–ê–ì -->
                    <div class="hp-container">
                        <div id="enemy-hp-bar" class="hp-bar"></div>
                    </div>
                    <div id="enemy-hp-text" class="hp-text">100/100 HP</div>
                </div>

                <!-- –ù–ò–ñ–ù–Ø–Ø –û–ë–õ–ê–°–¢–¨ -->
                <div class="battle-bottom-area">
                    <!-- –õ–û–ì -->
                    <div id="battle-log" class="battle-log-container"></div>

                    <!-- –î–ï–ô–°–¢–í–ò–Ø -->
                    <div class="battle-actions-area">
                        <!-- –ö–ù–û–ü–ö–ò –°–õ–ï–í–ê -->
                        <div class="battle-buttons">
                            <button id="attack-button" class="battle-action-btn" onclick="newBattleSystem.attackAction()">
                                <i class="fas fa-sword"></i>
                                –ê–¢–ê–ö–ê
                            </button>
                            <button id="dodge-button" class="battle-action-btn" onclick="newBattleSystem.dodgeAction()">
                                <i class="fas fa-running"></i>
                                –£–í–ï–†–ù–£–¢–¨–°–Ø
                            </button>
                        </div>

                        <!-- –ò–ì–†–û–ö –í –¶–ï–ù–¢–†–ï -->
                        <div class="player-battle-area">
                            <img id="player-img" class="player-battle-img" alt="Player NFT">
                            <div>
                                <div class="player-name">–í–´</div>
                                <div id="player-nft-name" class="player-nft-name">NFT NAME</div>
                                <div class="player-hp-container">
                                    <div id="player-hp-bar" class="hp-bar"></div>
                                </div>
                            </div>
                            <div id="player-hp-text" class="player-hp-text">100/100 HP</div>
                        </div>

                        <!-- –ö–ù–û–ü–ö–ò –°–ü–†–ê–í–ê -->
                        <div class="battle-buttons">
                            <div style="flex: 1; opacity: 0.3; background: #1a1a1a; border: 2px dashed #333333; border-radius: 12px; display: flex; align-items: center; justify-content: center; color: #666666; font-size: 12px;">
                                –†–µ–∑–µ—Ä–≤
                            </div>
                            <div style="flex: 1; opacity: 0.3; background: #1a1a1a; border: 2px dashed #333333; border-radius: 12px; display: flex; align-items: center; justify-content: center; color: #666666; font-size: 12px;">
                                –†–µ–∑–µ—Ä–≤
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –†–ï–ó–£–õ–¨–¢–ê–¢ -->
                <div id="battle-result" class="battle-result-overlay" style="display: none;">
                    <div class="battle-result-modal">
                        <div id="result-title" class="result-title"></div>
                        <div id="result-details" class="result-details"></div>
                        <button class="result-back-btn" onclick="newBattleSystem.closeBattle()">
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', html);
        this.battleContainer = document.getElementById('battle-container');
        console.log('üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI
    refreshUI() {
        this.updateImages();
        this.updateHPBars();
        this.updateHPTexts();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–º–µ–Ω
    updateImages() {
        const playerImg = document.getElementById('player-img');
        const enemyImg = document.getElementById('enemy-img');
        const enemyName = document.getElementById('enemy-name');
        const playerName = document.getElementById('player-nft-name');

        if (playerImg && this.playerNft) {
            playerImg.src = this.playerNft.img;
            playerImg.alt = this.playerNft.name;
        }
        
        if (enemyImg && this.enemyNft) {
            enemyImg.src = this.enemyNft.img;
            enemyImg.alt = this.enemyNft.name;
        }
        
        if (enemyName && this.enemyNft) {
            enemyName.textContent = this.enemyNft.name.toUpperCase();
        }
        
        if (playerName && this.playerNft) {
            playerName.textContent = this.playerNft.name;
        }

        console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–æ–≤
    updateHPBars() {
        const playerBar = document.getElementById('player-hp-bar');
        const enemyBar = document.getElementById('enemy-hp-bar');

        if (!playerBar || !enemyBar) {
            console.error('‚ùå HP –±–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        const playerPercent = Math.max(0, Math.min(100, (this.playerHP / this.maxHP) * 100));
        const enemyPercent = Math.max(0, Math.min(100, (this.enemyHP / this.maxHP) * 100));

        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–æ–≤:');
        console.log('   –ò–≥—Ä–æ–∫:', this.playerHP + '/' + this.maxHP + ' (' + playerPercent.toFixed(1) + '%)');
        console.log('   –í—Ä–∞–≥:', this.enemyHP + '/' + this.maxHP + ' (' + enemyPercent.toFixed(1) + '%)');

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        this.setBarWidth(playerBar, playerPercent, '–∏–≥—Ä–æ–∫–∞');
        this.setBarWidth(enemyBar, enemyPercent, '–≤—Ä–∞–≥–∞');

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ HP
        if (this.playerHP <= 25) {
            playerBar.classList.add('critical');
        } else {
            playerBar.classList.remove('critical');
        }

        if (this.enemyHP <= 25) {
            enemyBar.classList.add('critical');
        } else {
            enemyBar.classList.remove('critical');
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.verifyBars(playerBar, playerPercent, '–∏–≥—Ä–æ–∫–∞');
            this.verifyBars(enemyBar, enemyPercent, '–≤—Ä–∞–≥–∞');
        }, 50);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã HP –±–∞—Ä–∞
    setBarWidth(barElement, percent, name) {
        if (!barElement) return;

        const width = percent + '%';
        
        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã
        barElement.style.width = width;
        barElement.style.setProperty('width', width, 'important');
        barElement.setAttribute('style', `width: ${width} !important; transition: width 0.8s ease-out;`);
        
        console.log(`‚úÖ HP –±–∞—Ä ${name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${width}`);
        console.log(`   –†–µ–∞–ª—å–Ω—ã–π style.width: "${barElement.style.width}"`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã
    verifyBars(barElement, expectedPercent, name) {
        if (!barElement) return;

        const currentWidth = barElement.style.width;
        const expectedWidth = expectedPercent + '%';

        if (currentWidth !== expectedWidth) {
            console.log(`‚ö†Ô∏è HP –±–∞—Ä ${name} —Å–±—Ä–æ—Å–∏–ª—Å—è! –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞...`);
            console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedWidth}, –†–µ–∞–ª—å–Ω–æ: ${currentWidth}`);
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            barElement.style.removeProperty('width');
            setTimeout(() => {
                barElement.style.width = expectedWidth;
                barElement.style.setProperty('width', expectedWidth, 'important');
            }, 10);
        } else {
            console.log(`‚úÖ HP –±–∞—Ä ${name} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${currentWidth}`);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ HP
    updateHPTexts() {
        const playerText = document.getElementById('player-hp-text');
        const enemyText = document.getElementById('enemy-hp-text');

        if (playerText) {
            playerText.textContent = `${Math.max(0, Math.round(this.playerHP))}/${this.maxHP} HP`;
        }

        if (enemyText) {
            enemyText.textContent = `${Math.max(0, Math.round(this.enemyHP))}/${this.maxHP} HP`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    updateButtons() {
        const attackBtn = document.getElementById('attack-button');
        const dodgeBtn = document.getElementById('dodge-button');

        if (attackBtn && dodgeBtn) {
            const enabled = (this.currentTurn === 'player' && this.battleActive);
            attackBtn.disabled = !enabled;
            dodgeBtn.disabled = !enabled;
            
            console.log('üéÆ –ö–Ω–æ–ø–∫–∏:', enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
    logMessage(message) {
        const logContainer = document.getElementById('battle-log');
        if (!logContainer) return;

        this.battleLog.push(message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        const recent = this.battleLog.slice(-5);
        logContainer.innerHTML = recent
            .map(msg => `<div style="margin-bottom: 4px; padding: 2px 0;">‚Ä¢ ${msg}</div>`)
            .join('');
        
        logContainer.scrollTop = logContainer.scrollHeight;
        console.log('üìù –õ–æ–≥:', message);
    }

    // –î–ï–ô–°–¢–í–ò–ï: –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
    attackAction() {
        if (this.currentTurn !== 'player' || !this.battleActive) {
            console.log('‚ùå –ê—Ç–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        console.log('‚öîÔ∏è –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞');
        this.logMessage('–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ!');

        let damage = this.calculateDamage(15, 25);
        let isCrit = Math.random() < 0.15;
        const missed = Math.random() < 0.08;

        // –ê–ø–≥—Ä–µ–π–¥—ã –∏–≥—Ä–æ–∫–∞
        if (this.playerNft.upgrades) {
            if (this.playerNft.upgrades.damage) {
                damage *= this.playerNft.upgrades.damage;
            }
            if (this.playerNft.upgrades.crit && Math.random() < (0.15 * this.playerNft.upgrades.crit)) {
                isCrit = true;
            }
        }

        if (missed) {
            this.logMessage('–í—Ä–∞–≥ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!');
            this.showDamageEffect('enemy-img', '–ú–ò–ú–û', false);
        } else {
            if (isCrit) {
                damage *= 1.8;
                this.logMessage(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –ù–∞–Ω–µ—Å–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞!`);
                this.showDamageEffect('enemy-img', Math.round(damage), true);
            } else {
                this.logMessage(`–ù–∞–Ω–µ—Å–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞`);
                this.showDamageEffect('enemy-img', Math.round(damage), false);
            }

            this.enemyHP -= damage;
            this.enemyHP = Math.max(0, this.enemyHP);
            this.shakeElement('enemy-img');
        }

        this.endPlayerTurn();
    }

    // –î–ï–ô–°–¢–í–ò–ï: –£–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    dodgeAction() {
        if (this.currentTurn !== 'player' || !this.battleActive) {
            console.log('‚ùå –£–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return;
        }

        console.log('üèÉ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–∫–ª–æ–Ω–µ–Ω–∏—é');
        this.logMessage('–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å —É–≤–µ—Ä–Ω—É—Ç—å—Å—è!');
        this.playerDodging = true;

        this.endPlayerTurn();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    endPlayerTurn() {
        this.refreshUI();
        
        if (this.checkGameEnd()) {
            return;
        }

        this.currentTurn = 'enemy';
        this.updateButtons();

        setTimeout(() => {
            this.enemyTurn();
        }, 2000);
    }

    // –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemyTurn() {
        if (this.currentTurn !== 'enemy' || !this.battleActive) {
            console.log('‚ùå –•–æ–¥ –≤—Ä–∞–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        console.log('üëπ –•–æ–¥ –≤—Ä–∞–≥–∞');
        this.logMessage('–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç!');

        let damage = this.calculateDamage(12, 22);
        const isCrit = Math.random() < 0.12;

        // –ê–ø–≥—Ä–µ–π–¥—ã –≤—Ä–∞–≥–∞
        if (this.enemyNft.upgrades && this.enemyNft.upgrades.damage) {
            damage *= this.enemyNft.upgrades.damage;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        let dodgeChance = 0.06;
        if (this.playerNft.upgrades && this.playerNft.upgrades.dodge) {
            dodgeChance *= this.playerNft.upgrades.dodge;
        }
        if (this.playerDodging) {
            dodgeChance += 0.35;
        }

        const dodged = Math.random() < dodgeChance;

        if (dodged) {
            this.logMessage('–í—ã —É–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏!');
            this.showDamageEffect('player-img', '–ú–ò–ú–û', false);
        } else {
            if (isCrit) {
                damage *= 1.7;
                this.logMessage(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ê–¢–ê–ö–ê –í–†–ê–ì–ê! –ü–æ–ª—É—á–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞!`);
                this.showDamageEffect('player-img', Math.round(damage), true);
            } else {
                this.logMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${Math.round(damage)} —É—Ä–æ–Ω–∞`);
                this.showDamageEffect('player-img', Math.round(damage), false);
            }

            this.playerHP -= damage;
            this.playerHP = Math.max(0, this.playerHP);
            this.shakeElement('player-img');
            
            console.log('üíî –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É:', Math.round(damage), 'HP –æ—Å—Ç–∞–ª–æ—Å—å:', this.playerHP);
        }

        this.playerDodging = false;
        this.endEnemyTurn();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞
    endEnemyTurn() {
        this.refreshUI();
        
        if (this.checkGameEnd()) {
            return;
        }

        this.currentTurn = 'player';
        
        setTimeout(() => {
            this.updateButtons();
            this.logMessage('–í–∞—à —Ö–æ–¥!');
        }, 1800);
    }

    // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
    calculateDamage(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    checkGameEnd() {
        if (this.playerHP <= 0) {
            this.endGame(false);
            return true;
        } else if (this.enemyHP <= 0) {
            this.endGame(true);
            return true;
        }
        return false;
    }

    // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    endGame(playerWon) {
        console.log('üéØ –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã:', playerWon ? '–ü–û–ë–ï–î–ê' : '–ü–û–†–ê–ñ–ï–ù–ò–ï');
        this.battleActive = false;
        this.updateButtons();

        const resultOverlay = document.getElementById('battle-result');
        const resultTitle = document.getElementById('result-title');
        const resultDetails = document.getElementById('result-details');

        if (playerWon) {
            resultTitle.className = 'result-title win';
            resultTitle.innerHTML = 'üèÜ –ü–û–ë–ï–î–ê!';
            resultDetails.innerHTML = `
                <strong>–í—ã –ø–æ–±–µ–¥–∏–ª–∏!</strong><br><br>
                –ü–æ–ª—É—á–µ–Ω NFT: <strong>${this.enemyNft.name}</strong><br>
                <em>NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é</em>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if (window.collection && Array.isArray(window.collection)) {
                const newNft = { ...this.enemyNft, buyPrice: this.enemyNft.price || 150 };
                window.collection.push(newNft);
            }
        } else {
            resultTitle.className = 'result-title lose';
            resultTitle.innerHTML = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï!';
            resultDetails.innerHTML = `
                <strong>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...</strong><br><br>
                –ü–æ—Ç–µ—Ä—è–Ω NFT: <strong>${this.playerNft.name}</strong><br>
                <em>NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</em>
            `;

            // –£–¥–∞–ª—è–µ–º NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            if (window.collection && Array.isArray(window.collection)) {
                const index = window.collection.findIndex(nft => 
                    nft.name === this.playerNft.name && 
                    nft.img === this.playerNft.img && 
                    nft.buyPrice === this.playerNft.buyPrice
                );
                if (index !== -1) {
                    window.collection.splice(index, 1);
                    if (window.activeBattleNft) {
                        window.activeBattleNft = null;
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (window.battleHistory && Array.isArray(window.battleHistory)) {
            window.battleHistory.push({
                playerNft: { ...this.playerNft },
                opponentNft: { ...this.enemyNft },
                won: playerWon,
                timestamp: new Date().toISOString()
            });
        }

        resultOverlay.style.display = 'flex';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (window.updateUI) window.updateUI();
        if (window.saveData) {
            setTimeout(() => window.saveData(), 500);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —É—Ä–æ–Ω–∞
    showDamageEffect(targetId, damage, isCrit = false) {
        const target = document.getElementById(targetId);
        if (!target) return;

        const effect = document.createElement('div');
        effect.className = `damage-effect ${isCrit ? 'crit' : ''}`;
        effect.textContent = damage;
        effect.style.position = 'absolute';
        effect.style.top = '50%';
        effect.style.left = '50%';
        effect.style.transform = 'translate(-50%, -50%)';
        effect.style.pointerEvents = 'none';
        effect.style.zIndex = '1000';

        target.style.position = 'relative';
        target.appendChild(effect);

        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 1200);
    }

    // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏
    shakeElement(elementId) {
        const element = document.getElementById(elementId);
        if (!element) return;

        element.classList.add('battle-shake');
        setTimeout(() => {
            element.classList.remove('battle-shake');
        }, 500);
    }

    // –ü–æ–±–µ–≥ –∏–∑ –±–∏—Ç–≤—ã
    escapeBattle() {
        if (window.stars < 50) {
            this.logMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–±–µ–≥–∞! (–Ω—É–∂–Ω–æ 50)');
            return;
        }

        window.stars -= 50;
        this.logMessage('–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è! –ü–æ—Ç–µ—Ä—è–Ω–æ 50 –∑–≤—ë–∑–¥.');

        if (window.updateUI) window.updateUI();
        if (window.saveData) window.saveData();

        setTimeout(() => {
            this.closeBattle();
        }, 1500);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∏—Ç–≤—ã
    closeBattle() {
        console.log('üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∏—Ç–≤—ã');

        if (this.battleContainer) {
            this.battleContainer.remove();
            this.battleContainer = null;
        }

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        const mainScreen = document.getElementById('main-screen');
        if (mainScreen) {
            mainScreen.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => item.classList.remove('active'));
        if (navItems[0]) {
            navItems[0].classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.renderCenterArea) window.renderCenterArea();
        if (window.updateUI) window.updateUI();

        console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
window.newBattleSystem = new NewUndertaleBattle();

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
window.startUndertaleBattle = function(playerNft, enemyNft) {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –ù–û–í–û–ô BATTLE –°–ò–°–¢–ï–ú–´ ===');
    
    if (!playerNft || !enemyNft) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ NFT!');
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω NFT –¥–ª—è –±–∏—Ç–≤—ã!');
        return false;
    }
    
    const success = window.newBattleSystem.startBattle(playerNft, enemyNft);
    console.log(success ? '‚úÖ –ë–∏—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞!' : '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!');
    return success;
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
window.battleSystem = {
    init: function(playerNft, enemyNft) {
        return window.newBattleSystem.startBattle(playerNft, enemyNft);
    }
};

console.log('‚úÖ –ù–æ–≤–∞—è Battle System –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
