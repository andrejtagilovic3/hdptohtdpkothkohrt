// ==================== UNDERTALE BATTLE SYSTEM (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø HP) ====================

class BattleSystem {
    constructor() {
        this.reset();
    }

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–∏—Ç–≤—ã
    reset() {
        this.playerHP = 100;
        this.enemyHP = 100;
        this.maxHP = 100;
        this.currentTurn = 'player';
        this.isActive = false;
        this.playerNft = null;
        this.enemyNft = null;
        this.battleLog = [];
        this.playerDodging = false;
        this.elements = {}; // –ö—ç—à DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ç–≤—ã
    init(playerNft, enemyNft) {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ç–≤—ã:', playerNft.name, 'vs', enemyNft.name);
        
        this.reset();
        this.playerNft = {...playerNft};
        this.enemyNft = {...enemyNft};
        this.isActive = true;
        
        this.createUI();
        this.cacheElements();
        this.setupEventListeners();
        this.updateDisplay();
        this.addLog(`–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${playerNft.name} –ø—Ä–æ—Ç–∏–≤ ${enemyNft.name}`);
        
        return true;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    createUI() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const existing = document.getElementById('undertale-battle-container');
        if (existing) existing.remove();

        const battleHTML = `
            <div id="undertale-battle-container" class="undertale-battle-container">
                <div class="enemy-battle-area">
                    <button class="escape-btn" id="escape-btn">
                        –°–±–µ–∂–∞—Ç—å (50‚≠ê)
                    </button>

                    <img id="enemy-battle-img" class="enemy-battle-img" alt="Enemy NFT">
                    <div id="enemy-name" class="enemy-name">–í–†–ê–ì</div>

                    <div class="battle-hp-container enemy-hp-container">
                        <div id="enemy-hp-bar" class="battle-hp-bar"></div>
                    </div>
                    <div id="enemy-hp-text" class="battle-hp-text">100/100 HP</div>
                </div>

                <div class="battle-bottom-area">
                    <div id="battle-log-container" class="battle-log-container"></div>

                    <div class="battle-actions-area">
                        <div class="battle-buttons">
                            <button id="attack-btn" class="battle-action-btn">
                                <i class="fas fa-sword"></i>
                                –ê–¢–ê–ö–ê
                            </button>
                            <button id="dodge-btn" class="battle-action-btn">
                                <i class="fas fa-running"></i>
                                –£–í–ï–†–ù–£–¢–¨–°–Ø
                            </button>
                        </div>

                        <div class="player-battle-area">
                            <img id="player-battle-img" class="player-battle-img" alt="Player NFT">
                            <div>
                                <div class="player-name">–í–´</div>
                                <div id="player-nft-name" class="player-nft-name">NFT NAME</div>
                                <div class="battle-hp-container player-hp-container">
                                    <div id="player-hp-bar" class="battle-hp-bar"></div>
                                </div>
                                <div id="player-hp-text" class="player-hp-text">100/100 HP</div>
                            </div>
                        </div>

                        <div class="battle-buttons">
                            <div class="battle-reserve-slot">–†–µ–∑–µ—Ä–≤</div>
                            <div class="battle-reserve-slot">–†–µ–∑–µ—Ä–≤</div>
                        </div>
                    </div>
                </div>

                <div id="battle-result-overlay" class="battle-result-overlay" style="display: none;">
                    <div class="battle-result-modal">
                        <div id="result-title" class="result-title"></div>
                        <div id="result-details" class="result-details"></div>
                        <button id="result-back-btn" class="result-back-btn">
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', battleHTML);
        console.log('‚úÖ UI —Å–æ–∑–¥–∞–Ω');
    }

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cacheElements() {
        this.elements = {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            playerImg: document.getElementById('player-battle-img'),
            enemyImg: document.getElementById('enemy-battle-img'),
            
            // –¢–µ–∫—Å—Ç
            enemyName: document.getElementById('enemy-name'),
            playerNftName: document.getElementById('player-nft-name'),
            playerHPText: document.getElementById('player-hp-text'),
            enemyHPText: document.getElementById('enemy-hp-text'),
            
            // HP –±–∞—Ä—ã
            playerHPBar: document.getElementById('player-hp-bar'),
            enemyHPBar: document.getElementById('enemy-hp-bar'),
            
            // –ö–Ω–æ–ø–∫–∏
            attackBtn: document.getElementById('attack-btn'),
            dodgeBtn: document.getElementById('dodge-btn'),
            escapeBtn: document.getElementById('escape-btn'),
            resultBackBtn: document.getElementById('result-back-btn'),
            
            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            battleLog: document.getElementById('battle-log-container'),
            resultOverlay: document.getElementById('battle-result-overlay'),
            resultTitle: document.getElementById('result-title'),
            resultDetails: document.getElementById('result-details')
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        this.elements.attackBtn.addEventListener('click', () => this.playerAttack());
        this.elements.dodgeBtn.addEventListener('click', () => this.playerDodge());
        this.elements.escapeBtn.addEventListener('click', () => this.attemptEscape());
        this.elements.resultBackBtn.addEventListener('click', () => this.endBattle());
    }

    // === HP SYSTEM (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê) ===
    updateHPBar(barElement, currentHP, maxHP, isPlayer = false) {
        if (!barElement) {
            console.error('‚ùå HP –±–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ HP –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
        currentHP = Math.max(0, Math.round(currentHP));
        const percent = Math.max(0, Math.min(100, (currentHP / maxHP) * 100));
        
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–∞ (${isPlayer ? '–ò–ì–†–û–ö' : '–í–†–ê–ì'}): ${currentHP}/${maxHP} = ${percent.toFixed(1)}%`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å CSS –¥–ª—è —Ü–≤–µ—Ç–∞
        barElement.className = 'battle-hp-bar'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
        
        if (percent > 50) {
            barElement.classList.add('healthy');
        } else if (percent > 25) {
            barElement.classList.add('damaged');
        } else {
            barElement.classList.add('critical');
        }

        // –í–ê–ñ–ù–û! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ style
        barElement.style.width = `${percent}%`;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (isPlayer) {
            console.log(`‚úÖ HP –±–∞—Ä –ò–ì–†–û–ö–ê: —à–∏—Ä–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${percent}%`);
            console.log(`   –†–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: ${barElement.offsetWidth}px –∏–∑ ${barElement.parentElement.offsetWidth}px`);
        }
        
        return true;
    }

    // –ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HP
    updateHPBars() {
        console.log('üîÑ === –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø HP –ë–ê–†–û–í ===');
        console.log(`   –¢–µ–∫—É—â–µ–µ HP: –ò–≥—Ä–æ–∫=${this.playerHP}, –í—Ä–∞–≥=${this.enemyHP}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º HP –±–∞—Ä—ã
        const playerSuccess = this.updateHPBar(this.elements.playerHPBar, this.playerHP, this.maxHP, true);
        const enemySuccess = this.updateHPBar(this.elements.enemyHPBar, this.enemyHP, this.maxHP, false);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è HP
        this.updateHPTexts();

        console.log(`üîÑ === –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø HP –ë–ê–†–û–í ===`);
        return playerSuccess && enemySuccess;
    }

    // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ HP
    updateHPTexts() {
        if (this.elements.playerHPText) {
            const displayPlayerHP = Math.max(0, Math.round(this.playerHP));
            this.elements.playerHPText.textContent = `${displayPlayerHP}/${this.maxHP} HP`;
            console.log(`üìù –¢–µ–∫—Å—Ç HP –∏–≥—Ä–æ–∫–∞: ${displayPlayerHP}/${this.maxHP}`);
        }
        
        if (this.elements.enemyHPText) {
            const displayEnemyHP = Math.max(0, Math.round(this.enemyHP));
            this.elements.enemyHPText.textContent = `${displayEnemyHP}/${this.maxHP} HP`;
            console.log(`üìù –¢–µ–∫—Å—Ç HP –≤—Ä–∞–≥–∞: ${displayEnemyHP}/${this.maxHP}`);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–∏—Å–ø–ª–µ—è
    updateDisplay() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (this.elements.playerImg && this.playerNft) {
            this.elements.playerImg.src = this.playerNft.img;
            this.elements.playerImg.alt = this.playerNft.name;
        }
        if (this.elements.enemyImg && this.enemyNft) {
            this.elements.enemyImg.src = this.enemyNft.img;
            this.elements.enemyImg.alt = this.enemyNft.name;
            this.elements.enemyName.textContent = this.enemyNft.name.toUpperCase();
        }
        if (this.elements.playerNftName && this.playerNft) {
            this.elements.playerNftName.textContent = this.playerNft.name;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º HP —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        this.forceUpdateHP();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateActionButtons();
    }

    // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HP
    forceUpdateHP() {
        console.log('üí™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï HP');
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–æ–≤
        this.updateHPBars();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á—É
        Promise.resolve().then(() => {
            this.updateHPBars();
        });
        
        // –ò –µ—â–µ –æ–¥–Ω–æ —á–µ—Ä–µ–∑ setTimeout –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        setTimeout(() => {
            this.updateHPBars();
        }, 50);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    updateActionButtons() {
        const canAct = this.currentTurn === 'player' && this.isActive;
        
        this.elements.attackBtn.disabled = !canAct;
        this.elements.dodgeBtn.disabled = !canAct;
        
        console.log('üéÆ –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –•–æ–¥:', this.currentTurn, '–ê–∫—Ç–∏–≤–Ω–∞:', this.isActive);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
    addLog(message) {
        if (!this.elements.battleLog) return;

        this.battleLog.push(message);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        const recentLogs = this.battleLog.slice(-5);
        this.elements.battleLog.innerHTML = recentLogs
            .map(log => `<div style="margin-bottom: 4px; padding: 2px 0;">‚Ä¢ ${log}</div>`)
            .join('');
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.elements.battleLog.scrollTop = this.elements.battleLog.scrollHeight;
        
        console.log('üìù –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', message);
    }

    // === COMBAT SYSTEM ===
    
    // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
    playerAttack() {
        if (!this.canPlayerAct()) {
            console.log('‚ùå –ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }

        console.log('‚öîÔ∏è –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç!');
        this.addLog('–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ!');
        
        const attackResult = this.calculateDamage(true);
        this.applyAttackResult(attackResult, true);
        
        this.endPlayerTurn();
    }

    // –£–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    playerDodge() {
        if (!this.canPlayerAct()) {
            console.log('‚ùå –£–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
            return;
        }

        console.log('üèÉ –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —É–∫–ª–æ–Ω–µ–Ω–∏—é!');
        this.addLog('–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å —É–≤–µ—Ä–Ω—É—Ç—å—Å—è!');
        this.playerDodging = true;
        
        this.endPlayerTurn();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
    canPlayerAct() {
        return this.currentTurn === 'player' && this.isActive;
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    endPlayerTurn() {
        this.currentTurn = 'enemy';
        this.updateActionButtons();
        
        setTimeout(() => {
            if (this.isActive) {
                this.enemyTurn();
            }
        }, 2000);
    }

    // –•–æ–¥ –≤—Ä–∞–≥–∞
    enemyTurn() {
        if (this.currentTurn !== 'enemy' || !this.isActive) {
            console.log('‚ùå –•–æ–¥ –≤—Ä–∞–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('=== –ù–ê–ß–ê–õ–û –•–û–î–ê –í–†–ê–ì–ê ===');
        console.log('üëπ HP –∏–≥—Ä–æ–∫–∞ –î–û –∞—Ç–∞–∫–∏:', this.playerHP);
        
        this.addLog('–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç!');

        const attackResult = this.calculateDamage(false);
        this.applyAttackResult(attackResult, false);

        this.endEnemyTurn();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞
    endEnemyTurn() {
        this.playerDodging = false;
        
        console.log('üëπ HP –∏–≥—Ä–æ–∫–∞ –ü–û–°–õ–ï –∞—Ç–∞–∫–∏:', this.playerHP);

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º HP –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
        this.forceUpdateHP();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–∏—Ç–≤—ã
        setTimeout(() => {
            this.checkBattleEnd();
        }, 500);

        if (this.isActive) {
            this.currentTurn = 'player';
            setTimeout(() => {
                this.updateActionButtons();
                this.addLog('–í–∞—à —Ö–æ–¥!');
            }, 1800);
        }
    }

    // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
    calculateDamage(isPlayerAttack) {
        const attacker = isPlayerAttack ? this.playerNft : this.enemyNft;
        const defender = isPlayerAttack ? this.enemyNft : this.playerNft;
        const targetHP = isPlayerAttack ? this.enemyHP : this.playerHP;

        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        let damage = isPlayerAttack ? 
            Math.floor(Math.random() * 25) + 15 : 
            Math.floor(Math.random() * 22) + 12;

        const isLowHP = targetHP <= 25;
        let critChance = isLowHP ? 0.3 : (isPlayerAttack ? 0.15 : 0.12);
        let dodgeChance = 0.08;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        if (attacker.upgrades) {
            if (attacker.upgrades.damage) {
                damage *= attacker.upgrades.damage;
            }
            if (attacker.upgrades.crit) {
                critChance *= attacker.upgrades.crit;
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥—ã –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
        if (defender.upgrades && defender.upgrades.dodge) {
            dodgeChance *= defender.upgrades.dodge;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–∫–ª–æ–Ω–µ–Ω–∏–µ
        if (!isPlayerAttack && this.playerDodging) {
            dodgeChance += 0.35;
        }

        // –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–æ—Ç–∞
        if (!isPlayerAttack) {
            damage *= 1.15; // –ë–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞
        } else {
            damage *= 0.90; // –ò–≥—Ä–æ–∫ –Ω–∞–Ω–æ—Å–∏—Ç –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞
        }

        const isCritical = Math.random() < critChance;
        const isMiss = Math.random() < dodgeChance;

        if (isCritical && !isMiss) {
            damage *= isPlayerAttack ? 1.8 : 1.7;
        }

        return {
            damage: Math.floor(damage),
            isCritical,
            isMiss
        };
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—Ç–∞–∫–∏
    applyAttackResult(result, isPlayerAttack) {
        const targetImg = isPlayerAttack ? this.elements.enemyImg : this.elements.playerImg;
        const { damage, isCritical, isMiss } = result;

        console.log(`üí• –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏: —É—Ä–æ–Ω=${damage}, –∫—Ä–∏—Ç=${isCritical}, –ø—Ä–æ–º–∞—Ö=${isMiss}, –∞—Ç–∞–∫—É–µ—Ç_–∏–≥—Ä–æ–∫=${isPlayerAttack}`);

        if (isMiss) {
            if (isPlayerAttack) {
                this.addLog('–ü—Ä–æ–º–∞—Ö! –í–∞—à–∞ –∞—Ç–∞–∫–∞ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ —Ü–µ–ª—å!');
            } else {
                this.addLog('–£–∫–ª–æ–Ω–µ–Ω–∏–µ! –í—ã –∏–∑–±–µ–∂–∞–ª–∏ –∞—Ç–∞–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!');
            }
            this.showDamageEffect(targetImg, '–ú–ò–ú–û', false);
        } else {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            if (isPlayerAttack) {
                const oldHP = this.enemyHP;
                this.enemyHP = Math.max(0, this.enemyHP - damage);
                console.log(`‚öîÔ∏è –£—Ä–æ–Ω –≤—Ä–∞–≥—É: ${oldHP} -> ${this.enemyHP} (—É—Ä–æ–Ω: ${damage})`);
                
                if (isCritical) {
                    this.addLog(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ ${damage} —É—Ä–æ–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É!`);
                } else {
                    this.addLog(`–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ ${damage} —É—Ä–æ–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É!`);
                }
            } else {
                const oldHP = this.playerHP;
                this.playerHP = Math.max(0, this.playerHP - damage);
                console.log(`üíÄ –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É: ${oldHP} -> ${this.playerHP} (—É—Ä–æ–Ω: ${damage})`);
                
                if (isCritical) {
                    this.addLog(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ê–¢–ê–ö–ê –û–ü–ü–û–ù–ï–ù–¢–ê! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${damage} —É—Ä–æ–Ω–∞!`);
                } else {
                    this.addLog(`–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–∞–Ω–æ—Å–∏—Ç –≤–∞–º ${damage} —É—Ä–æ–Ω–∞!`);
                }
            }

            this.showDamageEffect(targetImg, damage, isCritical);
            this.addShakeEffect(targetImg);
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º HP –±–∞—Ä—ã –ø–æ—Å–ª–µ —É—Ä–æ–Ω–∞
        console.log('üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï HP –ü–û–°–õ–ï –£–†–û–ù–ê');
        this.forceUpdateHP();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if ((this.playerHP <= 15 || this.enemyHP <= 15) && this.playerHP > 0 && this.enemyHP > 0) {
            setTimeout(() => {
                this.addLog('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∏–π —É–¥–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—à–∞—é—â–∏–º!');
            }, 1000);
        }
    }

    // –≠—Ñ—Ñ–µ–∫—Ç —É—Ä–æ–Ω–∞
    showDamageEffect(targetElement, damage, isCrit = false) {
        if (!targetElement) return;

        const effect = document.createElement('div');
        effect.className = `damage-effect ${isCrit ? 'crit' : ''}`;
        effect.textContent = damage;
        
        targetElement.style.position = 'relative';
        targetElement.appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 1200);
    }

    // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏
    addShakeEffect(element) {
        element.classList.add('battle-shake');
        setTimeout(() => {
            element.classList.remove('battle-shake');
        }, 500);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∏—Ç–≤—ã
    checkBattleEnd() {
        console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –±–∏—Ç–≤—ã. –ò–≥—Ä–æ–∫ HP:', this.playerHP, '–í—Ä–∞–≥ HP:', this.enemyHP);
        
        if (this.playerHP <= 0) {
            console.log('üíÄ –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª');
            this.isActive = false;
            setTimeout(() => this.showResult(false), 1000);
        } else if (this.enemyHP <= 0) {
            console.log('üèÜ –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª');
            this.isActive = false;
            setTimeout(() => this.showResult(true), 1000);
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∏—Ç–≤—ã
    showResult(playerWon) {
        if (!this.elements.resultOverlay || !this.elements.resultTitle || !this.elements.resultDetails) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        if (playerWon) {
            this.elements.resultTitle.className = 'result-title win';
            this.elements.resultTitle.innerHTML = 'üèÜ –ü–û–ë–ï–î–ê!';
            this.elements.resultDetails.innerHTML = `
                <strong>–í—ã –ø–æ–±–µ–¥–∏–ª–∏!</strong><br><br>
                –ü–æ–ª—É—á–µ–Ω NFT: <strong>${this.enemyNft.name}</strong><br>
                <em>NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é</em>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if (window.collection && Array.isArray(window.collection)) {
                const newNft = {
                    ...this.enemyNft, 
                    buyPrice: this.enemyNft.price || 150
                };
                window.collection.push(newNft);
                console.log('‚úÖ NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', this.enemyNft.name);
            }
        } else {
            this.elements.resultTitle.className = 'result-title lose';
            this.elements.resultTitle.innerHTML = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï!';
            this.elements.resultDetails.innerHTML = `
                <strong>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...</strong><br><br>
                –ü–æ—Ç–µ—Ä—è–Ω NFT: <strong>${this.playerNft.name}</strong><br>
                <em>NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</em>
            `;

            // –£–¥–∞–ª—è–µ–º NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            if (window.collection && Array.isArray(window.collection)) {
                const index = window.collection.findIndex(nft => 
                    nft.name === this.playerNft.name && 
                    nft.img === this.playerNft.img && 
                    nft.buyPrice === this.playerNft.buyPrice
                );
                
                if (index !== -1) {
                    window.collection.splice(index, 1);
                    console.log('‚ùå NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', this.playerNft.name);
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π NFT
                    if (window.activeBattleNft) {
                        window.activeBattleNft = null;
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∏—Ç–≤
        if (window.battleHistory && Array.isArray(window.battleHistory)) {
            window.battleHistory.push({
                playerNft: {...this.playerNft},
                opponentNft: {...this.enemyNft},
                won: playerWon,
                timestamp: new Date().toISOString()
            });
        }

        this.elements.resultOverlay.style.display = 'flex';

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (window.updateUI) {
            window.updateUI();
        }
        if (window.saveData) {
            setTimeout(() => {
                window.saveData();
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            }, 500);
        }
        
        console.log('üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã –ø–æ–∫–∞–∑–∞–Ω:', playerWon ? '–ü–û–ë–ï–î–ê' : '–ü–û–†–ê–ñ–ï–ù–ò–ï');
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞
    attemptEscape() {
        if (window.stars < 50) {
            this.addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–±–µ–≥–∞! (–Ω—É–∂–Ω–æ 50)');
            return;
        }

        window.stars -= 50;
        this.addLog('–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è! –ü–æ—Ç–µ—Ä—è–Ω–æ 50 –∑–≤—ë–∑–¥.');
        
        if (window.updateUI) window.updateUI();
        if (window.saveData) window.saveData();
        
        setTimeout(() => {
            this.endBattle();
        }, 1500);
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã
    endBattle() {
        console.log('üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã');
        
        const container = document.getElementById('undertale-battle-container');
        if (container) {
            container.remove();
            console.log('üóëÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∏—Ç–≤—ã —É–¥–∞–ª–µ–Ω');
        }

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const screens = document.querySelectorAll('.screen');
        screens.forEach(s => s.classList.remove('active'));
        
        const mainScreen = document.getElementById('main-screen');
        if (mainScreen) {
            mainScreen.classList.add('active');
            console.log('üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => item.classList.remove('active'));
        if (navItems[0]) {
            navItems[0].classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.renderCenterArea) {
            window.renderCenterArea();
        }
        if (window.updateUI) {
            window.updateUI();
        }
        
        console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.battleSystem = new BattleSystem();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–∏—Ç–≤—ã
window.startUndertaleBattle = function(playerNft, enemyNft) {
    console.log('üöÄ === –ó–ê–ü–£–°–ö UNDERTALE –ë–ò–¢–í–´ ===');
    
    if (!playerNft || !enemyNft) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ NFT!');
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω NFT –¥–ª—è –±–∏—Ç–≤—ã!');
        return false;
    }
    
    const success = window.battleSystem.init(playerNft, enemyNft);
    console.log(success ? '‚úÖ –ë–∏—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞!' : '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!');
    return success;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Undertale Battle System –∑–∞–≥—Ä—É–∂–µ–Ω!');
});

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
setTimeout(() => {
    if (typeof window.startUndertaleBattle === 'function' && window.battleSystem) {
        console.log('üü¢ ‚úÖ Battle System –≥–æ—Ç–æ–≤!');
    } else {
        console.error('üî¥ ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Battle System!');
    }
}, 1000);
