// ==================== UNDERTALE BATTLE SYSTEM (–û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø HP –°–ò–°–¢–ï–ú–ê) ====================

class UndertaleBattle {
    constructor() {
        this.playerHP = 100;
        this.enemyHP = 100;
        this.playerMaxHP = 100;
        this.enemyMaxHP = 100;
        this.currentTurn = 'player';
        this.battleActive = false;
        this.playerNft = null;
        this.enemyNft = null;
        this.battleLog = [];
        this.playerDodging = false;
    }

    init(playerNft, enemyNft) {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ç–≤—ã:', playerNft.name, 'vs', enemyNft.name);
        
        this.playerNft = {...playerNft};
        this.enemyNft = {...enemyNft};
        this.playerHP = 100;
        this.enemyHP = 100;
        this.playerMaxHP = 100;
        this.enemyMaxHP = 100;
        this.battleActive = true;
        this.currentTurn = 'player';
        this.battleLog = [];
        this.playerDodging = false;
        
        this.createBattleUI();
        this.updateDisplay();
        this.showPlayerActions();
        this.addBattleLog(`–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${playerNft.name} –ø—Ä–æ—Ç–∏–≤ ${enemyNft.name}`);
        
        return true;
    }

    createBattleUI() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        const existing = document.getElementById('undertale-battle-container');
        if (existing) existing.remove();

        const battleHTML = `
            <div id="undertale-battle-container" class="undertale-battle-container">
                <div class="enemy-battle-area">
                    <button class="escape-btn" onclick="battleSystem.attemptEscape()">
                        –°–±–µ–∂–∞—Ç—å (50‚≠ê)
                    </button>

                    <img id="enemy-battle-img" class="enemy-battle-img" alt="Enemy NFT">
                    <div id="enemy-name" class="enemy-name">–í–†–ê–ì</div>

                    <div class="battle-hp-container enemy-hp-container">
                        <div id="enemy-hp-bar" class="battle-hp-bar" style="width: 100%;"></div>
                    </div>
                    <div id="enemy-hp-text" class="battle-hp-text">100/100 HP</div>
                </div>

                <div class="battle-bottom-area">
                    <div id="battle-log-container" class="battle-log-container"></div>

                    <div class="battle-actions-area">
                        <div class="battle-buttons">
                            <button id="attack-btn" class="battle-action-btn" onclick="battleSystem.playerAttack()">
                                <i class="fas fa-sword"></i>
                                –ê–¢–ê–ö–ê
                            </button>
                            <button id="dodge-btn" class="battle-action-btn" onclick="battleSystem.playerDodge()">
                                <i class="fas fa-running"></i>
                                –£–í–ï–†–ù–£–¢–¨–°–Ø
                            </button>
                        </div>

                        <div class="player-battle-area">
                            <img id="player-battle-img" class="player-battle-img" alt="Player NFT">
                            <div>
                                <div class="player-name">–í–´</div>
                                <div id="player-nft-name" class="player-nft-name">NFT NAME</div>
                                <div class="battle-hp-container player-hp-container">
                                    <div id="player-hp-bar" class="battle-hp-bar" style="width: 100%;"></div>
                                </div>
                            </div>
                            <div id="player-hp-text" class="player-hp-text">100/100 HP</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', battleHTML);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        document.getElementById('enemy-battle-img').src = this.enemyNft.img;
        document.getElementById('player-battle-img').src = this.playerNft.img;
        document.getElementById('player-nft-name').textContent = this.playerNft.name;
        document.getElementById('enemy-name').textContent = this.enemyNft.name;
    }

    showPlayerActions() {
        document.getElementById('attack-btn').disabled = false;
        document.getElementById('dodge-btn').disabled = false;
    }

    addBattleLog(message) {
        this.battleLog.push(message);
        const logContainer = document.getElementById('battle-log-container');
        logContainer.innerHTML = this.battleLog.slice(-5).join('<br>');
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    updateDisplay() {
        this.updateHPBar('player-hp-bar', this.playerHP, this.playerMaxHP);
        this.updateHPBar('enemy-hp-bar', this.enemyHP, this.enemyMaxHP);
        document.getElementById('player-hp-text').textContent = `${Math.max(0, this.playerHP)}/${this.playerMaxHP} HP`;
        document.getElementById('enemy-hp-text').textContent = `${Math.max(0, this.enemyHP)}/${this.enemyMaxHP} HP`;
    }

    updateHPBar(barId, currentHP, maxHP) {
        const bar = document.getElementById(barId);
        if (!bar) {
            console.error(`‚ùå HP –±–∞—Ä ${barId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        const percent = Math.max(0, Math.min(100, (currentHP / maxHP) * 100));
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${barId}: ${currentHP}/${maxHP} = ${percent.toFixed(1)}%`);

        bar.style.width = percent + '%';
        if (currentHP <= 25) {
            bar.classList.add('critical');
        } else {
            bar.classList.remove('critical');
        }

        bar.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow

        return true;
    }

    checkWinCondition() {
        if (this.playerHP <= 0) {
            this.endBattle(false);
        } else if (this.enemyHP <= 0) {
            this.endBattle(true);
        }
    }

    playerAttack() {
        if (!this.battleActive || this.currentTurn !== 'player') return;

        const damage = Math.floor(Math.random() * 35) + 8; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω 8-42
        this.enemyHP = Math.max(0, this.enemyHP - damage);
        this.addBattleLog(`–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç! –£—Ä–æ–Ω: ${damage}`);
        console.log(`–ò–≥—Ä–æ–∫ –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω: ${damage}, enemyHP: ${this.enemyHP}`);

        this.updateDisplay();
        this.currentTurn = 'enemy';
        document.getElementById('attack-btn').disabled = true;
        document.getElementById('dodge-btn').disabled = true;

        setTimeout(() => this.enemyTurn(), 1500);
    }

    playerDodge() {
        if (!this.battleActive || this.currentTurn !== 'player') return;

        this.playerDodging = true;
        this.addBattleLog('–ò–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è —É–≤–µ—Ä–Ω—É—Ç—å—Å—è!');
        console.log('–ò–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —É–∫–ª–æ–Ω–µ–Ω–∏–µ');

        this.updateDisplay();
        this.currentTurn = 'enemy';
        document.getElementById('attack-btn').disabled = true;
        document.getElementById('dodge-btn').disabled = true;

        setTimeout(() => this.enemyTurn(), 1500);
    }

    enemyTurn() {
        if (!this.battleActive || this.currentTurn !== 'enemy') return;

        console.log('=== –ù–∞—á–∞–ª–æ enemyTurn ===');
        console.log('–¢–µ–∫—É—â–µ–µ playerHP –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º:', this.playerHP);
        console.log('playerDodging:', this.playerDodging);

        let damage = Math.floor(Math.random() * 21) + 20; // –£—Ä–æ–Ω 20-40
        console.log('–†–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–π damage:', damage);

        if (this.playerDodging) {
            const missChance = Math.random();
            console.log('missChance:', missChance);
            if (missChance < 0.5) {
                damage = 0;
                this.addBattleLog('–ò–≥—Ä–æ–∫ —É–≤–µ—Ä–Ω—É–ª—Å—è! –£—Ä–æ–Ω: 0');
                console.log('–£–≤–µ—Ä–Ω—É–ª—Å—è! damage —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 0');
            } else {
                this.addBattleLog('–£–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ —É–¥–∞–ª–æ—Å—å!');
            }
            this.playerDodging = false;
        }

        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π damage –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º:', damage);
        console.log('Before subtract: playerHP =', this.playerHP);
        this.playerHP = Math.max(0, this.playerHP - damage);
        console.log('After subtract: playerHP =', this.playerHP);

        this.addBattleLog(`–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç! –£—Ä–æ–Ω: ${damage}`);

        this.updateDisplay();
        this.checkWinCondition();

        this.currentTurn = 'player';
        this.showPlayerActions();

        console.log('=== –ö–æ–Ω–µ—Ü enemyTurn ===');
    }

    endBattle(playerWon) {
        console.log('üéÆ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã, –ø–æ–±–µ–¥–∞:', playerWon);
        this.battleActive = false;

        const resultOverlay = document.createElement('div');
        resultOverlay.id = 'battle-result-overlay';
        resultOverlay.className = 'battle-result-overlay';
        resultOverlay.innerHTML = `
            <div class="battle-result-modal">
                <div class="battle-result-text">${playerWon ? '–ü–û–ë–ï–î–ê!' : '–ü–û–†–ê–ñ–ï–ù–ò–ï!'}</div>
                <button class="result-back-btn" onclick="battleSystem.endBattleCleanup()">–í–µ—Ä–Ω—É—Ç—å—Å—è</button>
            </div>
        `;
        document.body.appendChild(resultOverlay);

        // –£–¥–∞–ª—è–µ–º NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        if (!playerWon && window.collection) {
            const index = window.collection.findIndex(
                nft => nft.name === this.playerNft.name && 
                       nft.img === this.playerNft.img && 
                       nft.buyPrice === this.playerNft.buyPrice
            );
            if (index !== -1) {
                window.collection.splice(index, 1);
                console.log('‚ùå NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', this.playerNft.name);
                if (window.activeBattleNft) {
                    window.activeBattleNft = null;
                }
            } else {
                console.error('‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            }
        }

        if (window.battleHistory && Array.isArray(window.battleHistory)) {
            window.battleHistory.push({
                playerNft: {...this.playerNft},
                opponentNft: {...this.enemyNft},
                won: playerWon,
                timestamp: new Date().toISOString()
            });
        }

        if (window.updateUI) {
            window.updateUI();
        }
        if (window.saveData) {
            setTimeout(() => {
                window.saveData();
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            }, 500);
        }
    }

    endBattleCleanup() {
        const container = document.getElementById('undertale-battle-container');
        if (container) container.remove();
        const overlay = document.getElementById('battle-result-overlay');
        if (overlay) overlay.remove();

        const screens = document.querySelectorAll('.screen');
        screens.forEach(s => s.classList.remove('active'));
        const mainScreen = document.getElementById('main-screen');
        if (mainScreen) mainScreen.classList.add('active');

        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => item.classList.remove('active'));
        if (navItems[0]) navItems[0].classList.add('active');

        if (window.renderCenterArea) window.renderCenterArea();
        if (window.updateUI) window.updateUI();
    }

    attemptEscape() {
        if (window.stars < 50) {
            this.addBattleLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–±–µ–≥–∞! (–Ω—É–∂–Ω–æ 50)');
            return;
        }

        window.stars -= 50;
        this.addBattleLog('–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è! –ü–æ—Ç–µ—Ä—è–Ω–æ 50 –∑–≤—ë–∑–¥.');
        
        if (window.updateUI) window.updateUI();
        if (window.saveData) window.saveData();
        
        setTimeout(() => this.endBattleCleanup(), 1500);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.battleSystem = new UndertaleBattle();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–∏—Ç–≤—ã
window.startUndertaleBattle = function(playerNft, enemyNft) {
    console.log('üöÄ === –ó–ê–ü–£–°–ö UNDERTALE –ë–ò–¢–í–´ ===');
    
    if (!playerNft || !enemyNft) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ NFT!');
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω NFT –¥–ª—è –±–∏—Ç–≤—ã!');
        return false;
    }
    
    const success = window.battleSystem.init(playerNft, enemyNft);
    console.log(success ? '‚úÖ –ë–∏—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞!' : '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!');
    return success;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Undertale Battle System –∑–∞–≥—Ä—É–∂–µ–Ω!');
});

setTimeout(() => {
    if (typeof window.startUndertaleBattle === 'function' && window.battleSystem) {
        console.log('üü¢ ‚úÖ Battle System –≥–æ—Ç–æ–≤!');
    } else {
        console.error('üî¥ ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Battle System!');
    }
}, 1000);
