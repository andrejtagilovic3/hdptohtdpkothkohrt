// –ö–†–ê–°–ò–í–ê–Ø –ë–û–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø

window.battleSystem = {
    playerHP: 100,
    enemyHP: 100,
    maxPlayerHP: 100,
    maxEnemyHP: 100,
    isActive: false,
    
    init: function(playerNft, enemyNft) {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ –∫—Ä–∞—Å–∏–≤–æ–π –±–∏—Ç–≤—ã');
        
        this.playerHP = 100;
        this.enemyHP = 100;
        this.maxPlayerHP = 100;
        this.maxEnemyHP = 100;
        this.isActive = true;
        this.playerNft = playerNft;
        this.enemyNft = enemyNft;
        
        this.createUI();
        this.playSound('battle-start');
        return true;
    },
    
    createUI: function() {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ
        const old = document.getElementById('battle-screen');
        if (old) old.remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const html = `
        <div id="battle-screen">
            <!-- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å -->
            <div class="battle-header">
                <div class="battle-title">‚öîÔ∏è –î–£–≠–õ–¨</div>
                <button class="battle-exit-btn" onclick="window.battleSystem.exit()">
                    <i class="fas fa-times"></i> –í—ã—Ö–æ–¥
                </button>
            </div>
            
            <!-- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –±–∏—Ç–≤—ã -->
            <div class="battle-main">
                <!-- –í—Ä–∞–≥ -->
                <div class="battle-enemy-section">
                    <div class="battle-enemy-title">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫</div>
                    <img id="enemy-battle-img" src="${this.enemyNft.img}" class="battle-enemy-img" alt="${this.enemyNft.name}">
                    
                    <div class="battle-hp-section">
                        <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px; color: #ff6b6b;">
                            ${this.enemyNft.name}
                        </div>
                        <div class="battle-hp-container">
                            <div id="enemy-hp-bar" class="battle-hp-bar healthy"></div>
                        </div>
                        <div id="enemy-hp-text" class="battle-hp-text">${this.enemyHP}/${this.maxEnemyHP} HP</div>
                    </div>
                </div>
                
                <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ -->
                <div class="battle-center">
                    <button id="battle-fight-btn" class="battle-fight-btn">
                        ‚öîÔ∏è –ê–¢–ê–ö–ê!
                    </button>
                </div>
                
                <!-- –ò–≥—Ä–æ–∫ -->
                <div class="battle-player-section">
                    <div class="battle-hp-section">
                        <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px; color: #4caf50;">
                            ${this.playerNft.name}
                        </div>
                        <div class="battle-hp-container">
                            <div id="player-hp-bar" class="battle-hp-bar healthy"></div>
                        </div>
                        <div id="player-hp-text" class="battle-hp-text">${this.playerHP}/${this.maxPlayerHP} HP</div>
                    </div>
                    
                    <img id="player-battle-img" src="${this.playerNft.img}" class="battle-player-img" alt="${this.playerNft.name}">
                    <div class="battle-player-title">–í–∞—à NFT</div>
                </div>
            </div>
        </div>`;
        
        document.body.innerHTML += html;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        document.getElementById('battle-fight-btn').onclick = () => this.fight();
    },
    
    fight: function() {
        if (!this.isActive) return;
        
        console.log('‚öîÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –ë–û–ô!');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        const btn = document.getElementById('battle-fight-btn');
        btn.disabled = true;
        btn.textContent = '‚öîÔ∏è –ë–æ–π –∏–¥–µ—Ç...';
        
        // –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤
        if (Math.random() < 0.5) {
            // –ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫
            setTimeout(() => this.playerAttack(), 500);
        } else {
            // –ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç –≤—Ä–∞–≥
            setTimeout(() => this.enemyAttack(), 500);
        }
    },
    
    playerAttack: function() {
        if (!this.isActive) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
        const playerImg = document.getElementById('player-battle-img');
        playerImg.style.transform = 'scale(1.1)';
        
        setTimeout(() => {
            playerImg.style.transform = 'scale(1)';
            
            // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
            let damage = Math.floor(Math.random() * 20) + 15;
            let isCritical = Math.random() < 0.15; // 15% —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            
            if (isCritical) {
                damage = Math.floor(damage * 1.5);
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            this.enemyHP -= damage;
            if (this.enemyHP < 0) this.enemyHP = 0;
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã
            this.showDamage('enemy', damage, isCritical);
            this.shakeEnemy();
            this.updateBars();
            this.playSound(isCritical ? 'critical-hit' : 'hit');
            
            console.log(`üó°Ô∏è –ò–≥—Ä–æ–∫ –Ω–∞–Ω–µ—Å ${damage} —É—Ä–æ–Ω–∞${isCritical ? ' (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô!)' : ''}. HP –≤—Ä–∞–≥–∞: ${this.enemyHP}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
            if (this.enemyHP <= 0) {
                setTimeout(() => this.gameOver(true), 1000);
            } else {
                // –•–æ–¥ –≤—Ä–∞–≥–∞
                setTimeout(() => this.enemyAttack(), 1500);
            }
        }, 300);
    },
    
    enemyAttack: function() {
        if (!this.isActive) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞
        const enemyImg = document.getElementById('enemy-battle-img');
        enemyImg.style.transform = 'scale(1.1)';
        
        setTimeout(() => {
            enemyImg.style.transform = 'scale(1)';
            
            // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
            let damage = Math.floor(Math.random() * 18) + 12;
            let isCritical = Math.random() < 0.12; // 12% —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ —É –≤—Ä–∞–≥–∞
            
            if (isCritical) {
                damage = Math.floor(damage * 1.5);
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            this.playerHP -= damage;
            if (this.playerHP < 0) this.playerHP = 0;
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã
            this.showDamage('player', damage, isCritical);
            this.shakePlayer();
            this.updateBars();
            this.playSound(isCritical ? 'critical-hit' : 'hit');
            
            console.log(`üíÄ –í—Ä–∞–≥ –Ω–∞–Ω–µ—Å ${damage} —É—Ä–æ–Ω–∞${isCritical ? ' (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô!)' : ''}. HP –∏–≥—Ä–æ–∫–∞: ${this.playerHP}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
            if (this.playerHP <= 0) {
                setTimeout(() => this.gameOver(false), 1000);
            } else {
                // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
                this.enableButton();
            }
        }, 300);
    },
    
    showDamage: function(target, damage, isCritical) {
        const targetElement = document.getElementById(target === 'enemy' ? 'enemy-battle-img' : 'player-battle-img');
        const rect = targetElement.getBoundingClientRect();
        
        const damageEl = document.createElement('div');
        damageEl.className = `damage-effect ${target}-damage${isCritical ? ' critical' : ''}`;
        damageEl.textContent = `-${damage}${isCritical ? ' –ö–†–ò–¢!' : ''}`;
        damageEl.style.left = (rect.left + rect.width / 2) + 'px';
        damageEl.style.top = rect.top + 'px';
        
        document.body.appendChild(damageEl);
        
        setTimeout(() => {
            if (damageEl.parentNode) {
                damageEl.parentNode.removeChild(damageEl);
            }
        }, 1500);
    },
    
    shakeEnemy: function() {
        const enemyImg = document.getElementById('enemy-battle-img');
        enemyImg.classList.add('battle-shake');
        setTimeout(() => {
            enemyImg.classList.remove('battle-shake');
        }, 600);
    },
    
    shakePlayer: function() {
        const playerImg = document.getElementById('player-battle-img');
        playerImg.classList.add('battle-shake');
        setTimeout(() => {
            playerImg.classList.remove('battle-shake');
        }, 600);
    },
    
    updateBars: function() {
        const playerPercent = Math.max(0, (this.playerHP / this.maxPlayerHP) * 100);
        const enemyPercent = Math.max(0, (this.enemyHP / this.maxEnemyHP) * 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ä—ã
        const playerBar = document.getElementById('player-hp-bar');
        const enemyBar = document.getElementById('enemy-hp-bar');
        
        if (playerBar) {
            playerBar.style.width = playerPercent + '%';
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç HP
            playerBar.classList.remove('healthy', 'damaged', 'critical');
            if (playerPercent > 60) {
                playerBar.classList.add('healthy');
            } else if (playerPercent > 30) {
                playerBar.classList.add('damaged');
            } else {
                playerBar.classList.add('critical');
            }
        }
        
        if (enemyBar) {
            enemyBar.style.width = enemyPercent + '%';
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç HP
            enemyBar.classList.remove('healthy', 'damaged', 'critical');
            if (enemyPercent > 60) {
                enemyBar.classList.add('healthy');
            } else if (enemyPercent > 30) {
                enemyBar.classList.add('damaged');
            } else {
                enemyBar.classList.add('critical');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        const playerHPText = document.getElementById('player-hp-text');
        const enemyHPText = document.getElementById('enemy-hp-text');
        
        if (playerHPText) playerHPText.textContent = `${this.playerHP}/${this.maxPlayerHP} HP`;
        if (enemyHPText) enemyHPText.textContent = `${this.enemyHP}/${this.maxEnemyHP} HP`;
    },
    
    enableButton: function() {
        if (!this.isActive) return;
        const btn = document.getElementById('battle-fight-btn');
        if (btn) {
            btn.disabled = false;
            btn.textContent = '‚öîÔ∏è –ê–¢–ê–ö–ê!';
        }
    },
    
    gameOver: function(playerWon) {
        this.isActive = false;
        
        const resultIcon = playerWon ? 'üèÜ' : 'üíÄ';
        const resultTitle = playerWon ? '–ü–û–ë–ï–î–ê!' : '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
        const resultMessage = playerWon ? 
            `–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${this.enemyNft.name}! NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é.` :
            `${this.enemyNft.name} –ø–æ–±–µ–¥–∏–ª –≤–∞—Å. NFT ${this.playerNft.name} –ø–æ—Ç–µ—Ä—è–Ω.`;
        
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const resultHTML = `
        <div class="battle-result-overlay">
            <div class="battle-result-content">
                <div class="battle-result-icon">${resultIcon}</div>
                <div class="battle-result-title ${playerWon ? 'win' : 'lose'}">${resultTitle}</div>
                <div class="battle-result-message">${resultMessage}</div>
                <button class="battle-result-btn" onclick="window.battleSystem.exit()">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                </button>
            </div>
        </div>`;
        
        document.getElementById('battle-screen').innerHTML += resultHTML;
        
        this.playSound(playerWon ? 'victory' : 'defeat');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        if (playerWon && window.collection) {
            window.collection.push({
                ...this.enemyNft,
                buyPrice: this.enemyNft.price || 150
            });
        } else if (!playerWon && window.collection && window.activeBattleNft) {
            const index = window.collection.findIndex(nft => 
                nft.name === this.playerNft.name && 
                nft.img === this.playerNft.img &&
                nft.buyPrice === this.playerNft.buyPrice
            );
            if (index !== -1) {
                window.collection.splice(index, 1);
                window.activeBattleNft = null;
            }
        }
        
        if (window.updateUI) window.updateUI();
    },
    
    playSound: function(type) {
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            const sounds = {
                'battle-start': 'üéµ',
                'hit': 'üí•',
                'critical-hit': '‚ö°',
                'victory': 'üéâ',
                'defeat': 'üòµ'
            };
            console.log(`üîä –ó–≤—É–∫: ${sounds[type] || 'üéµ'} (${type})`);
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞
        }
    },
    
    exit: function() {
        console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –±–∏—Ç–≤—ã');
        
        // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω –±–∏—Ç–≤—ã
        const battleScreen = document.getElementById('battle-screen');
        if (battleScreen) {
            battleScreen.style.opacity = '0';
            battleScreen.style.transform = 'scale(0.9)';
            battleScreen.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                battleScreen.remove();
            }, 300);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const screens = document.querySelectorAll('.screen');
        screens.forEach(s => s.classList.remove('active'));
        
        const mainScreen = document.getElementById('main-screen');
        if (mainScreen) {
            mainScreen.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => item.classList.remove('active'));
        if (navItems[0]) navItems[0].classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (window.renderCenterArea) window.renderCenterArea();
        if (window.updateUI) window.updateUI();
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    createParticles: function(x, y, color) {
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è –∫—Ä—É—Ç—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        for (let i = 0; i < 6; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: fixed;
                left: ${x + Math.random() * 40 - 20}px;
                top: ${y + Math.random() * 40 - 20}px;
                width: 4px;
                height: 4px;
                background: ${color};
                border-radius: 50%;
                pointer-events: none;
                z-index: 11000;
                animation: particleFade 1s ease-out forwards;
            `;
            
            document.body.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1000);
        }
    },
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
    animateAttack: function(attacker, target) {
        const attackerEl = document.getElementById(attacker + '-battle-img');
        const targetEl = document.getElementById(target + '-battle-img');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        attackerEl.style.transition = 'all 0.2s ease';
        attackerEl.style.transform = 'scale(1.2) translateY(-10px)';
        attackerEl.style.filter = 'brightness(1.3)';
        
        setTimeout(() => {
            attackerEl.style.transform = 'scale(1) translateY(0)';
            attackerEl.style.filter = 'brightness(1)';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ü–µ–ª–∏
            targetEl.style.transition = 'all 0.1s ease';
            targetEl.style.filter = 'brightness(1.5) hue-rotate(60deg)';
            
            setTimeout(() => {
                targetEl.style.filter = 'brightness(1)';
            }, 100);
        }, 200);
    }
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.startUndertaleBattle = function(playerNft, enemyNft) {
    return window.battleSystem.init(playerNft, enemyNft);
};

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —á–∞—Å—Ç–∏—Ü –≤ CSS
const particleStyles = document.createElement('style');
particleStyles.textContent = `
@keyframes particleFade {
    0% {
        opacity: 1;
        transform: scale(1) translateY(0);
    }
    100% {
        opacity: 0;
        transform: scale(0.3) translateY(-50px);
    }
}
`;
document.head.appendChild(particleStyles);

console.log('‚ú® –ö–†–ê–°–ò–í–ê–Ø –±–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
