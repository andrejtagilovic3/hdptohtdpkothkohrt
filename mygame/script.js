Telegram.WebApp.ready();

const cloudStorage = Telegram.WebApp.CloudStorage;

const nftTemplates = [
    { name: 'Bday candle', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/bdaycandle.gif', tier: 'basic' },
    { name: 'Big Year', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/bigyear.gif', tier: 'basic' },
    { name: 'Durev', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/durev.gif', tier: 'basic' },
    { name: 'Electric Skull', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/electricskull.gif', tier: 'premium' },
    { name: 'Jelly Bean', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/jellybean.gif', tier: 'basic' },
    { name: 'Low Rider', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/lowrider.gif', tier: 'basic' },
    { name: 'Siber', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/siber.gif', tier: 'basic' },
    { name: 'Skull Flower', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/SkullFlower_holders.gif', tier: 'basic' },
    { name: 'Snoop Dog', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/SnoopDogSkins.gif', tier: 'basic' },
    { name: 'Snoops Cigars', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/SnoopsCigars.gif', tier: 'premium' },
    { name: 'Swag Bag', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/Swag_Bag.gif', tier: 'basic' },
    { name: 'Vintage Cigar', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/VintageCigar.gif', tier: 'basic' },
    { name: 'West Side', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/WestSide.gif', tier: 'premium' },
    { name: 'Bday candle 2v', img: 'https://hdptohtdpkothkoefgefsaefefgefgsewef.vercel.app/mygame/imgg/1.gif', tier: 'premium' }
];

const nftPrices = [100, 150, 200, 250, 440, 350, 240, 85, 200, 300, 700, 500, 220, 450];

let stars = 100;
let collection = [];
let activeBattleNft = null;
let totalStarsEarned = 0;
let battleHistory = [];

const tgUser = Telegram.WebApp.initDataUnsafe?.user;
let userName = tgUser?.first_name || '–ò–≥—Ä–æ–∫';
let userAvatar = tgUser?.photo_url || 'üë§';

let playerHP = 100;
let botHP = 100;
let botNft = null;
let battleInProgress = false;
let currentScreen = 'main';

init();

async function init() {
    await loadData();
    updateUI();
    renderCenterArea();
    renderCollection();
    renderShop();
    renderProfile();
    updateUserInfo();
}

async function loadData() {
    try {
        const [starsStr, collectionStr, activeNftStr, totalEarnedStr, historyStr] = await Promise.all([
            getCloudItem('stars'),
            getCloudItem('collection'),
            getCloudItem('activeBattleNft'),
            getCloudItem('totalStarsEarned'),
            getCloudItem('battleHistory')
        ]);
        stars = parseInt(starsStr) || 100;
        collection = JSON.parse(collectionStr) || [];
        activeBattleNft = JSON.parse(activeNftStr) || null;
        totalStarsEarned = parseInt(totalEarnedStr) || 0;
        battleHistory = JSON.parse(historyStr) || [];
    } catch (error) {
        console.error('Error loading data:', error);
    }
}

async function saveData() {
    try {
        await Promise.all([
            setCloudItem('stars', stars.toString()),
            setCloudItem('collection', JSON.stringify(collection)),
            setCloudItem('activeBattleNft', JSON.stringify(activeBattleNft)),
            setCloudItem('totalStarsEarned', totalStarsEarned.toString()),
            setCloudItem('battleHistory', JSON.stringify(battleHistory))
        ]);
    } catch (error) {
        console.error('Error saving data:', error);
    }
}

function getCloudItem(key) {
    return new Promise((resolve, reject) => {
        cloudStorage.getItem(key, (error, value) => {
            if (error) reject(error);
            else resolve(value);
        });
    });
}

function setCloudItem(key, value) {
    return new Promise((resolve, reject) => {
        cloudStorage.setItem(key, value, (error, success) => {
            if (error || !success) reject(error);
            else resolve();
        });
    });
}

function updateUserInfo() {
    document.getElementById('user-name').textContent = userName;
    document.getElementById('profile-name').textContent = userName;
    
    if (typeof userAvatar === 'string' && userAvatar.startsWith('http')) {
        document.getElementById('user-avatar').innerHTML = `<img src="${userAvatar}" style="width:100%;height:100%;border-radius:50%;object-fit:cover;">`;
        document.getElementById('profile-avatar').innerHTML = `<img src="${userAvatar}" style="width:100%;height:100%;border-radius:50%;object-fit:cover;">`;
    }
}

function updateUI() {
    document.getElementById('star-count').textContent = stars;
    document.getElementById('profile-nft-count').textContent = collection.length;
    document.getElementById('profile-stars-earned').textContent = totalStarsEarned;
    document.getElementById('profile-battles-count').textContent = battleHistory.length;
    updatePlayButton();
    saveData();
}

function updatePlayButton() {
    const playBtn = document.getElementById('play-button');
    if (!activeBattleNft) {
        playBtn.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ NFT –¥–ª—è –¥—É—ç–ª–∏';
        playBtn.disabled = true;
    } else if (stars < 10) {
        playBtn.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ (10 –∑–≤—ë–∑–¥)';
        playBtn.disabled = true;
    } else {
        playBtn.textContent = '–î–£–≠–õ–¨ (10 –∑–≤—ë–∑–¥)';
        playBtn.disabled = false;
    }
}

function showPurchaseMenu() {
    document.getElementById('purchase-overlay').style.display = 'flex';
}

function closePurchaseMenu() {
    document.getElementById('purchase-overlay').style.display = 'none';
}

function purchaseStars(amount) {
    stars += amount;
    totalStarsEarned += amount;
    updateUI();
    alert(`–ö—É–ø–ª–µ–Ω–æ ${amount} –∑–≤—ë–∑–¥! (–¢–µ—Å—Ç)`);
    closePurchaseMenu();
}

function startBattleSearch() {
    if (!activeBattleNft || stars < 10) return;
    
    stars -= 10;
    updateUI();
    
    document.getElementById('searching-overlay').style.display = 'flex';
    
    const searchStatuses = [
        '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...',
        '–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...',
        '–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω!'
    ];
    
    let statusIndex = 0;
    const statusElement = document.getElementById('search-status');
    
    const updateStatus = () => {
        if (statusIndex < searchStatuses.length) {
            statusElement.textContent = searchStatuses[statusIndex];
            statusIndex++;
            if (statusIndex < searchStatuses.length) {
                setTimeout(updateStatus, 800);
            } else {
                setTimeout(startBattle, 500);
            }
        }
    };
    
    updateStatus();
}

function startBattle() {
    document.getElementById('searching-overlay').style.display = 'none';
    
    const playerPrice = activeBattleNft.buyPrice;
    let suitableNfts = [];
    
    nftTemplates.forEach((template, index) => {
        if (nftPrices[index] <= playerPrice + 50) {
            suitableNfts.push({ ...template, price: nftPrices[index] });
        }
    });
    
    if (suitableNfts.length === 0) {
        const randomIndex = Math.floor(Math.random() * nftTemplates.length);
        botNft = { ...nftTemplates[randomIndex], price: nftPrices[randomIndex] };
    } else {
        const randomIndex = Math.floor(Math.random() * suitableNfts.length);
        botNft = suitableNfts[randomIndex];
    }
    
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('battle-screen').classList.add('active');
    
    document.getElementById('coin-toss-overlay').style.display = 'flex';
    document.getElementById('coin-front').src = activeBattleNft.img;
    document.getElementById('coin-back').src = botNft.img;
    document.getElementById('coin-result-text').textContent = '';
    const coin = document.getElementById('coin');
    coin.style.animation = 'none';
    
    setTimeout(() => {
        const playerFirst = Math.random() < 0.5;
        const animationName = playerFirst ? 'flipFront' : 'flipBack';
        coin.style.animation = `${animationName} 3s ease-out forwards`;
        
        coin.addEventListener('animationend', () => {
            const text = playerFirst ? '–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º!' : '–û–ø–ø–æ–Ω–µ–Ω—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º!';
            document.getElementById('coin-result-text').textContent = text;
            
            setTimeout(() => {
                document.getElementById('coin-toss-overlay').style.display = 'none';
                initializeBattle(playerFirst);
            }, 2000);
        }, {once: true});
    }, 1000);
}

function initializeBattle(playerFirst) {
    playerHP = 100;
    botHP = 100;
    battleInProgress = true;
    
    document.getElementById('player-img').src = activeBattleNft.img;
    document.getElementById('bot-img').src = botNft.img;
    
    document.getElementById('battle-result').style.display = 'none';
    document.getElementById('reward-info').style.display = 'none';
    document.getElementById('back-to-menu-btn').style.display = 'none';
    
    const vsText = document.querySelector('.vs-text');
    const playerHpContainer = document.querySelector('.participant.left .hp-container');
    const botHpContainer = document.querySelector('.participant.right .hp-container');
    const playerHpText = document.getElementById('player-hp-text');
    const botHpText = document.getElementById('bot-hp-text');
    const playerName = document.querySelector('.participant.left .participant-name');
    const botName = document.querySelector('.participant.right .participant-name');
    const playerParticipant = document.querySelector('.participant.left');
    const botParticipant = document.querySelector('.participant.right');
    
    vsText.style.opacity = 0;
    playerHpContainer.style.opacity = 0;
    botHpContainer.style.opacity = 0;
    playerHpText.style.opacity = 0;
    botHpText.style.opacity = 0;
    playerName.style.opacity = 0;
    botName.style.opacity = 0;
    playerParticipant.style.opacity = 0;
    playerParticipant.style.transform = 'translateX(-100vw)';
    botParticipant.style.opacity = 0;
    botParticipant.style.transform = 'translateX(100vw)';
    
    setTimeout(() => {
        playerParticipant.style.transition = 'transform 1s ease, opacity 1s ease';
        botParticipant.style.transition = 'transform 1s ease, opacity 1s ease';
        playerParticipant.style.transform = 'translateX(0)';
        playerParticipant.style.opacity = 1;
        botParticipant.style.transform = 'translateX(0)';
        botParticipant.style.opacity = 1;
    }, 100);
    
    setTimeout(() => {
        botParticipant.style.transition = 'transform 0.5s ease';
        botParticipant.style.transform = 'scale(0.8) translateY(-20px)';
    }, 2100);
    
    setTimeout(() => {
        vsText.style.transition = 'opacity 0.5s ease';
        vsText.style.opacity = 1;
        vsText.classList.add('fade-in');
    }, 2100 + 500);
    
    setTimeout(() => {
        playerHpContainer.style.transition = 'opacity 0.5s ease';
        botHpContainer.style.transition = 'opacity 0.5s ease';
        playerHpContainer.style.opacity = 1;
        botHpContainer.style.opacity = 1;
        playerHpText.style.transition = 'opacity 0.5s ease';
        botHpText.style.transition = 'opacity 0.5s ease';
        playerHpText.style.opacity = 1;
        botHpText.style.opacity = 1;
        updateHPBars();
    }, 2100 + 500 + 500);
    
    setTimeout(() => {
        playerName.style.transition = 'opacity 0.5s ease';
        botName.style.transition = 'opacity 0.5s ease';
        playerName.style.opacity = 1;
        botName.style.opacity = 1;
    }, 2100 + 500 + 500 + 500);
    
    setTimeout(() => {
        const log = document.getElementById('battle-log');
        if (playerFirst) {
            log.textContent = '–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –ø–µ—Ä–≤—ã–º–∏! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...';
            setTimeout(() => performAttack(true), 2000);
        } else {
            log.textContent = '–û–ø–ø–æ–Ω–µ–Ω—Ç –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º! –ó–∞—â–∏—â–∞–π—Ç–µ—Å—å...';
            setTimeout(() => performAttack(false), 2000);
        }
    }, 2100 + 500 + 500 + 500 + 500);
}

function performAttack(isPlayerTurn) {
    if (!battleInProgress) return;
    
    let damage;
    const isLowHP = (isPlayerTurn ? botHP : playerHP) <= 25;
    const isCritical = Math.random() < (isLowHP ? 0.3 : 0.15);
    
    if (isCritical) {
        damage = Math.floor(Math.random() * 30) + 45;
    } else {
        damage = Math.floor(Math.random() * 35) + 8;
    }
    
    const isMiss = Math.random() < 0.08;
    const log = document.getElementById('battle-log');
    let targetImg;
    
    if (isPlayerTurn) {
        targetImg = document.getElementById('bot-img');
    } else {
        targetImg = document.getElementById('player-img');
    }
    
    if (isMiss) {
        if (isPlayerTurn) {
            log.textContent = '–ü—Ä–æ–º–∞—Ö! –í–∞—à–∞ –∞—Ç–∞–∫–∞ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ —Ü–µ–ª—å!';
        } else {
            log.textContent = '–£–∫–ª–æ–Ω–µ–Ω–∏–µ! –í—ã –∏–∑–±–µ–∂–∞–ª–∏ –∞—Ç–∞–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!';
        }
    } else {
        if (isPlayerTurn) {
            botHP = Math.max(0, botHP - damage);
            if (isCritical) {
                log.textContent = `–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ ${damage} —É—Ä–æ–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É!`;
            } else {
                log.textContent = `–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ ${damage} —É—Ä–æ–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É!`;
            }
        } else {
            playerHP = Math.max(0, playerHP - damage);
            if (isCritical) {
                log.textContent = `–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ê–¢–ê–ö–ê –û–ü–ü–û–ù–ï–ù–¢–ê! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${damage} —É—Ä–æ–Ω–∞!`;
            } else {
                log.textContent = `–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–∞–Ω–æ—Å–∏—Ç –≤–∞–º ${damage} —É—Ä–æ–Ω–∞!`;
            }
        }
        targetImg.classList.add('shake');
        setTimeout(() => targetImg.classList.remove('shake'), 500);
    }
    
    updateHPBars();
    
    if ((playerHP <= 15 || botHP <= 15) && playerHP > 0 && botHP > 0) {
        setTimeout(() => {
            log.textContent = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∏–π —É–¥–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—à–∞—é—â–∏–º!';
        }, 1000);
    }
    
    if (playerHP <= 0 || botHP <= 0) {
        setTimeout(() => endBattle(), 2000);
    } else {
        const delay = Math.random() * 1000 + 1500;
        setTimeout(() => performAttack(!isPlayerTurn), delay);
    }
}

function updateHPBars() {
    const playerBar = document.getElementById('player-hp-bar');
    const botBar = document.getElementById('bot-hp-bar');
    const playerText = document.getElementById('player-hp-text');
    const botText = document.getElementById('bot-hp-text');
    
    playerBar.style.width = `${playerHP}%`;
    botBar.style.width = `${botHP}%`;
    
    if (playerHP <= 20) playerBar.classList.add('low');
    else playerBar.classList.remove('low');
    
    if (botHP <= 20) botBar.classList.add('low');
    else botBar.classList.remove('low');
    
    playerText.textContent = `${playerHP}/100 HP`;
    botText.textContent = `${botHP}/100 HP`;
}

function endBattle() {
    battleInProgress = false;
    const resultDiv = document.getElementById('battle-result');
    const rewardDiv = document.getElementById('reward-info');
    const log = document.getElementById('battle-log');
    
    let result;
    let reward;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö NFT –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const battlePlayerNft = activeBattleNft ? { ...activeBattleNft } : null;
    const battleBotNft = { ...botNft };
    
    if (playerHP > 0) {
        resultDiv.textContent = '–ü–û–ë–ï–î–ê!';
        resultDiv.className = 'battle-result win';
        log.textContent = '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞! –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–∏–ª—å–Ω–µ–µ!';
        
        const rewardNft = { ...botNft, buyPrice: botNft.price };
        collection.push(rewardNft);
        rewardDiv.innerHTML = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ NFT: ${botNft.name}!`;
        rewardDiv.classList.add('win');
        rewardDiv.classList.remove('lose');
        
        result = 'win';
        reward = botNft.name;
    } else {
        resultDiv.textContent = '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
        resultDiv.className = 'battle-result lose';
        log.textContent = '–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...';
        
        if (activeBattleNft) {
            collection = collection.filter(nft => 
                nft.name !== activeBattleNft.name || nft.img !== activeBattleNft.img
            );
            reward = `–ü–æ—Ç–µ—Ä—è–Ω: ${activeBattleNft.name}`;
            activeBattleNft = null;
            rewardDiv.innerHTML = `–í–∞—à NFT –∑–∞—Ö–≤–∞—á–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º!`;
            rewardDiv.classList.add('lose');
            rewardDiv.classList.remove('win');
        }
        
        result = 'lose';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    battleHistory.push({
        date: new Date().toLocaleDateString('ru-RU'),
        result: result,
        playerNft: {
            name: battlePlayerNft ? battlePlayerNft.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            img: battlePlayerNft ? battlePlayerNft.img : 'https://via.placeholder.com/60x60?text=?'
        },
        botNft: {
            name: battleBotNft.name,
            img: battleBotNft.img
        },
        reward: reward
    });
    
    resultDiv.style.display = 'block';
    rewardDiv.style.display = 'block';
    document.getElementById('back-to-menu-btn').style.display = 'block';
    updateUI();
}

function backToMainFromBattle() {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('main-screen').classList.add('active');
    
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    document.querySelectorAll('.nav-item')[0].classList.add('active');
    
    updateUI();
    renderCenterArea();
    currentScreen = 'main';
}

function switchScreen(screen) {
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    event.target.closest('.nav-item').classList.add('active');
    
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    
    if (screen === 'main') {
        document.getElementById('main-screen').classList.add('active');
        renderCenterArea();
    } else if (screen === 'collection') {
        document.getElementById('collection-screen').classList.add('active');
        renderCollection();
    } else if (screen === 'upgrade') {
        document.getElementById('upgrade-screen').classList.add('active');
    } else if (screen === 'profile') {
        document.getElementById('profile-screen').classList.add('active');
        renderProfile();
    } else if (screen === 'friends') {
        document.getElementById('friends-screen').classList.add('active');
    }
    
    currentScreen = screen;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function goToCollection() {
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    document.querySelectorAll('.nav-item')[1].classList.add('active'); // –∫–æ–ª–ª–µ–∫—Ü–∏—è - –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
    
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('collection-screen').classList.add('active');
    
    renderCollection();
    currentScreen = 'collection';
}

function openShop() {
    document.getElementById('collection-screen').classList.remove('active');
    document.getElementById('shop-screen').classList.add('active');
    renderShop();
}

function backToCollection() {
    document.getElementById('shop-screen').classList.remove('active');
    document.getElementById('collection-screen').classList.add('active');
    renderCollection(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
}

function renderCenterArea() {
    const centerDiv = document.getElementById('center-content');
    centerDiv.innerHTML = '';
    if (activeBattleNft) {
        centerDiv.innerHTML = `
            <img src="${activeBattleNft.img}" class="center-nft-img" alt="${activeBattleNft.name}">
            <div class="center-nft-name">${activeBattleNft.name}</div>
            <div class="center-nft-status">–ì–æ—Ç–æ–≤ –∫ –¥—É—ç–ª–∏</div>
        `;
    } else {
        centerDiv.innerHTML = '<div class="center-logo">//</div><div class="center-message">–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω NFT –¥–ª—è –¥—É—ç–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ <span class="clickable-link" onclick="goToCollection()">–∫–æ–ª–ª–µ–∫—Ü–∏–∏</span></div>';
    }
}

function renderCollection() {
    const grid = document.getElementById('collection-grid');
    grid.innerHTML = '';
    
    if (collection.length === 0) {
        grid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #888888;">–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞<br>–ö—É–ø–∏—Ç–µ NFT –≤ –º–∞–≥–∞–∑–∏–Ω–µ</div>';
    } else {
        collection.forEach((nft, index) => {
            const isActive = activeBattleNft && activeBattleNft.name === nft.name && activeBattleNft.img === nft.img;
            const card = document.createElement('div');
            card.className = 'nft-card';
            card.innerHTML = `
                <img src="${nft.img}" class="nft-card-img" alt="${nft.name}">
                <div class="nft-card-name">${nft.name} ${isActive ? '‚öîÔ∏è' : ''}</div>
                <div class="nft-card-price">–ö—É–ø–ª–µ–Ω–æ –∑–∞ ${nft.buyPrice} –∑–≤—ë–∑–¥</div>
                <button class="nft-card-btn" onclick="setToBattle(${index})" ${isActive ? 'disabled' : ''}>
                    ${isActive ? '–ì–æ—Ç–æ–≤ –∫ –¥—É—ç–ª–∏' : '–ö –¥—É—ç–ª–∏'}
                </button>
                <button class="nft-card-btn secondary" onclick="sellNft(${index})">
                    –ü—Ä–æ–¥–∞—Ç—å ${Math.floor(nft.buyPrice * 0.8)} –∑–≤—ë–∑–¥
                </button>
            `;
            grid.appendChild(card);
        });
    }
}

function renderShop() {
    const grid = document.getElementById('shop-grid');
    grid.innerHTML = '';
    
    nftTemplates.forEach((template, index) => {
        const price = nftPrices[index];
        const card = document.createElement('div');
        card.className = 'nft-card';
        card.innerHTML = `
            <img src="${template.img}" class="nft-card-img" alt="${template.name}">
            <div class="nft-card-name">${template.name}</div>
            <div class="nft-card-price">${price} –∑–≤—ë–∑–¥</div>
            <button class="nft-card-btn" onclick="buyNft(${index}, ${price})" ${stars < price ? 'disabled' : ''}>
                ${stars < price ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥' : '–ö—É–ø–∏—Ç—å'}
            </button>
        `;
        grid.appendChild(card);
    });
}

function renderProfile() {
    const grid = document.getElementById('profile-collection');
    grid.innerHTML = '';
    
    if (collection.length === 0) {
        grid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #888888;">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT</div>';
    } else {
        collection.forEach((nft) => {
            const isActive = activeBattleNft && activeBattleNft.name === nft.name && activeBattleNft.img === nft.img;
            const card = document.createElement('div');
            card.className = 'nft-card';
            card.innerHTML = `
                <img src="${nft.img}" class="nft-card-img" alt="${nft.name}">
                <div class="nft-card-name">${nft.name} ${isActive ? '‚öîÔ∏è' : ''}</div>
                <div class="nft-card-price">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${nft.buyPrice} –∑–≤—ë–∑–¥</div>
            `;
            grid.appendChild(card);
        });
    }
}

function buyNft(templateIndex, price) {
    if (stars >= price) {
        stars -= price;
        const nft = { ...nftTemplates[templateIndex], buyPrice: price };
        collection.push(nft);
        updateUI();
        alert(`–ö—É–ø–ª–µ–Ω ${nft.name}!`);
        renderShop();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        setTimeout(() => {
            backToCollection();
        }, 500);
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!');
    }
}

function sellNft(index) {
    const nft = collection[index];
    const sellPrice = Math.floor(nft.buyPrice * 0.8);
    stars += sellPrice;
    
    if (activeBattleNft && activeBattleNft.name === nft.name && activeBattleNft.img === nft.img) {
        activeBattleNft = null;
    }
    
    collection.splice(index, 1);
    updateUI();
    renderCollection();
    renderCenterArea();
    alert(`–ü—Ä–æ–¥–∞–Ω –∑–∞ ${sellPrice} –∑–≤—ë–∑–¥!`);
}

function showRules() {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('rules-screen').classList.add('active');
}

function backToMainFromRules() {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('main-screen').classList.add('active');
    document.querySelectorAll('.nav-item')[0].classList.add('active');
}

function setToBattle(index) {
    activeBattleNft = collection[index];
    renderCollection();
    renderCenterArea();
    updateUI();
    
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById('main-screen').classList.add('active');
    
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    document.querySelectorAll('.nav-item')[0].classList.add('active');
    
    currentScreen = 'main';
}

function showBattleHistory() {
    document.getElementById('profile-screen').classList.remove('active');
    document.getElementById('battle-history-screen').classList.add('active');
    renderBattleHistory();
}

function backToProfile() {
    document.getElementById('battle-history-screen').classList.remove('active');
    document.getElementById('profile-screen').classList.add('active');
}

function renderBattleHistory() {
    const historyList = document.getElementById('battle-history-list');
    historyList.innerHTML = '';
    
    if (battleHistory.length === 0) {
        historyList.innerHTML = '<div style="text-align: center; padding: 40px; color: #888888;">–ò—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π –ø—É—Å—Ç–∞<br>–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥—É—ç–ª—å!</div>';
        return;
    }
    
    battleHistory.slice().reverse().forEach(battle => {
        const historyItem = document.createElement('div');
        historyItem.className = 'battle-history-item';
        
        historyItem.innerHTML = `
            <div class="battle-history-header">
                <span class="battle-result-text ${battle.result}">${battle.result === 'win' ? '–ü–û–ë–ï–î–ê' : '–ü–û–†–ê–ñ–ï–ù–ò–ï'}</span>
                <span style="color: #888888; font-size: 14px;">${battle.date}</span>
            </div>
            <div class="battle-history-nfts">
                <div class="history-nft">
                    <img src="${battle.playerNft.img}" class="history-nft-img" alt="${battle.playerNft.name}" onerror="this.src='https://via.placeholder.com/60x60?text=?'">
                    <div class="history-nft-name">${battle.playerNft.name}</div>
                </div>
                <div class="history-vs">VS</div>
                <div class="history-nft">
                    <img src="${battle.botNft.img}" class="history-nft-img" alt="${battle.botNft.name}" onerror="this.src='https://via.placeholder.com/60x60?text=?'">
                    <div class="history-nft-name">${battle.botNft.name}</div>
                </div>
            </div>
            <div style="text-align: center; margin-top: 10px; font-size: 14px; color: #cccccc;">
                ${battle.reward}
            </div>
        `;
        
        historyList.appendChild(historyItem);
    });
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
function generateReferralCode() {
    if (!referralCode) {
        referralCode = 'ref_' + Math.random().toString(36).substr(2, 8);
        saveData();
    }
}

function inviteFriend() {
    const botUrl = `https://t.me/your_bot_name?start=${referralCode}`;
    const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(botUrl)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ NFT –∏–≥—Ä–µ! üéÆ')}`;
    
    if (Telegram.WebApp.openTelegramLink) {
        Telegram.WebApp.openTelegramLink(shareUrl);
    } else {
        window.open(shareUrl, '_blank');
    }
}

function copyReferralLink() {
    const botUrl = `https://t.me/your_bot_name?start=${referralCode}`;
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(botUrl).then(() => {
            showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = botUrl;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }
}

function showToast(message) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π toast
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #333;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        z-index: 10000;
        font-size: 14px;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        document.body.removeChild(toast);
    }, 2000);
}

function showTerms() {
    alert('–£—Å–ª–æ–≤–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞:\n\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞\n‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ % –æ—Ç –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
}

function renderFriends() {
    const friendsList = document.getElementById('friends-list');
    const friendsCount = document.getElementById('friends-count');
    
    friendsCount.textContent = `(${referredFriends.length})`;
    
    if (referredFriends.length === 0) {
        friendsList.innerHTML = `
            <div class="no-friends">
                –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π<br>—Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–≤—ë–∑–¥—ã.
            </div>
        `;
    } else {
        friendsList.innerHTML = '';
        referredFriends.forEach(friend => {
            const friendItem = document.createElement('div');
            friendItem.className = 'friend-item';
            friendItem.innerHTML = `
                <div class="friend-info">
                    <div class="friend-avatar">${friend.name.charAt(0).toUpperCase()}</div>
                    <div class="friend-name">${friend.name}</div>
                </div>
                <div class="friend-reward">
                    <i class="fas fa-star"></i>
                    10 –∑–≤—ë–∑–¥
                </div>
            `;
            friendsList.appendChild(friendItem);
        });
    }
}

function switchScreen(screen) {
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    event.target.closest('.nav-item').classList.add('active');
    
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    
    if (screen === 'main') {
        document.getElementById('main-screen').classList.add('active');
        renderCenterArea();
    } else if (screen === 'collection') {
        document.getElementById('collection-screen').classList.add('active');
        renderCollection();
    } else if (screen === 'upgrade') {
        document.getElementById('upgrade-screen').classList.add('active');
    } else if (screen === 'profile') {
        document.getElementById('profile-screen').classList.add('active');
        renderProfile();
    } else if (screen === 'friends') {
        document.getElementById('friends-screen').classList.add('active');
        renderFriends(); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥—Ä—É–∑–µ–π
    }
    
    currentScreen = screen;
}
